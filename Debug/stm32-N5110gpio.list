
stm32-N5110gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fdc  08003fdc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fdc  08003fdc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fdc  08003fdc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  2000006c  08004050  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08004050  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008404  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001957  00000000  00000000  000284db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ad  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010b87  00000000  00000000  0002ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a358  00000000  00000000  0003b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005ea7b  00000000  00000000  00045a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002354  00000000  00000000  000a44a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a67fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c34 	.word	0x08003c34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003c34 	.word	0x08003c34

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Button INput GPIOHandler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	0002      	movs	r2, r0
 800046c:	1dbb      	adds	r3, r7, #6
 800046e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000470:	2390      	movs	r3, #144	; 0x90
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2201      	movs	r2, #1
 8000476:	2120      	movs	r1, #32
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fb0d 	bl	8001a98 <HAL_GPIO_WritePin>
	switch (GPIO_Pin)
 800047e:	1dbb      	adds	r3, r7, #6
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	4293      	cmp	r3, r2
 8000488:	d01c      	beq.n	80004c4 <HAL_GPIO_EXTI_Callback+0x60>
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	00d2      	lsls	r2, r2, #3
 800048e:	4293      	cmp	r3, r2
 8000490:	dc1c      	bgt.n	80004cc <HAL_GPIO_EXTI_Callback+0x68>
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	4293      	cmp	r3, r2
 8000498:	d010      	beq.n	80004bc <HAL_GPIO_EXTI_Callback+0x58>
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	4293      	cmp	r3, r2
 80004a0:	dc14      	bgt.n	80004cc <HAL_GPIO_EXTI_Callback+0x68>
 80004a2:	2b40      	cmp	r3, #64	; 0x40
 80004a4:	d002      	beq.n	80004ac <HAL_GPIO_EXTI_Callback+0x48>
 80004a6:	2b80      	cmp	r3, #128	; 0x80
 80004a8:	d004      	beq.n	80004b4 <HAL_GPIO_EXTI_Callback+0x50>
 80004aa:	e00f      	b.n	80004cc <HAL_GPIO_EXTI_Callback+0x68>
	{
	case PIN6:
		user_input = left;
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_GPIO_EXTI_Callback+0x78>)
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
		break;
 80004b2:	e00f      	b.n	80004d4 <HAL_GPIO_EXTI_Callback+0x70>
	case PIN7:
		user_input = down;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_GPIO_EXTI_Callback+0x78>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
		break;
 80004ba:	e00b      	b.n	80004d4 <HAL_GPIO_EXTI_Callback+0x70>
	case PIN9:
		user_input = up;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_GPIO_EXTI_Callback+0x78>)
 80004be:	2203      	movs	r2, #3
 80004c0:	701a      	strb	r2, [r3, #0]
		break;
 80004c2:	e007      	b.n	80004d4 <HAL_GPIO_EXTI_Callback+0x70>
	case PIN10:
		user_input = right;
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_GPIO_EXTI_Callback+0x78>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
		break;
 80004ca:	e003      	b.n	80004d4 <HAL_GPIO_EXTI_Callback+0x70>
	default:
		user_input = none;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <HAL_GPIO_EXTI_Callback+0x78>)
 80004ce:	2205      	movs	r2, #5
 80004d0:	701a      	strb	r2, [r3, #0]
		break;
 80004d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000000 	.word	0x20000000

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f001 f802 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f846 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8bc 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f88a 	bl	8000608 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f001 f85d 	bl	80015b4 <HAL_Delay>

  LCD_setRST(GPIOB, GPIO_PIN_3);
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <main+0x90>)
 80004fc:	2108      	movs	r1, #8
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 f97c 	bl	80007fc <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_5);
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <main+0x90>)
 8000506:	2120      	movs	r1, #32
 8000508:	0018      	movs	r0, r3
 800050a:	f000 f98b 	bl	8000824 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_4);
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <main+0x90>)
 8000510:	2110      	movs	r1, #16
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f99a 	bl	800084c <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_10);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <main+0x90>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f000 f9a7 	bl	8000874 <LCD_setDIN>
  LCD_setCLK(GPIOA, GPIO_PIN_8);
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	005a      	lsls	r2, r3, #1
 800052a:	2390      	movs	r3, #144	; 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f9b3 	bl	800089c <LCD_setCLK>
  LCD_init();
 8000536:	f000 fa55 	bl	80009e4 <LCD_init>

  HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f001 f83a 	bl	80015b4 <HAL_Delay>

  //LCD_print("Hello World", 0, 0);
  initGame();
 8000540:	f000 fc70 	bl	8000e24 <initGame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    updateGame(user_input);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x94>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fd95 	bl	8001078 <updateGame>
    user_input = none;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <main+0x94>)
 8000550:	2205      	movs	r2, #5
 8000552:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fa9b 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(400);
 8000562:	23c8      	movs	r3, #200	; 0xc8
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f824 	bl	80015b4 <HAL_Delay>
    updateGame(user_input);
 800056c:	e7ea      	b.n	8000544 <main+0x64>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	48000400 	.word	0x48000400
 8000574:	20000000 	.word	0x20000000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b091      	sub	sp, #68	; 0x44
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2410      	movs	r4, #16
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2330      	movs	r3, #48	; 0x30
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fc79 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fc72 	bl	8002e80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	0021      	movs	r1, r4
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2205      	movs	r2, #5
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2202      	movs	r2, #2
 80005ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0252      	lsls	r2, r2, #9
 80005b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0352      	lsls	r2, r2, #13
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fa9f 	bl	8001b0c <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d2:	f000 f90d 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	003b      	movs	r3, r7
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	003b      	movs	r3, r7
 80005de:	2202      	movs	r2, #2
 80005e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	003b      	movs	r3, r7
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fda4 	bl	8002140 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005fc:	f000 f8f8 	bl	80007f0 <Error_Handler>
  }
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b011      	add	sp, #68	; 0x44
 8000606:	bd90      	pop	{r4, r7, pc}

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_USART2_UART_Init+0x58>)
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_USART2_UART_Init+0x5c>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	0212      	lsls	r2, r2, #8
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x58>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x58>)
 800064c:	0018      	movs	r0, r3
 800064e:	f001 febb 	bl	80023c8 <HAL_UART_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000656:	f000 f8cb 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000088 	.word	0x20000088
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	; 0x2c
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	2414      	movs	r4, #20
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fc01 	bl	8002e80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b59      	ldr	r3, [pc, #356]	; (80007e4 <MX_GPIO_Init+0x17c>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b58      	ldr	r3, [pc, #352]	; (80007e4 <MX_GPIO_Init+0x17c>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0309      	lsls	r1, r1, #12
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <MX_GPIO_Init+0x17c>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	031b      	lsls	r3, r3, #12
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <MX_GPIO_Init+0x17c>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b51      	ldr	r3, [pc, #324]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	03c9      	lsls	r1, r1, #15
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b4e      	ldr	r3, [pc, #312]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	03db      	lsls	r3, r3, #15
 80006b0:	4013      	ands	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0289      	lsls	r1, r1, #10
 80006c0:	430a      	orrs	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	029b      	lsls	r3, r3, #10
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	02c9      	lsls	r1, r1, #11
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <MX_GPIO_Init+0x17c>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	02db      	lsls	r3, r3, #11
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2390      	movs	r3, #144	; 0x90
 80006f0:	0059      	lsls	r1, r3, #1
 80006f2:	2390      	movs	r3, #144	; 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2200      	movs	r2, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f9cd 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80006fe:	2387      	movs	r3, #135	; 0x87
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <MX_GPIO_Init+0x180>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f001 f9c6 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2282      	movs	r2, #130	; 0x82
 8000710:	0192      	lsls	r2, r2, #6
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2288      	movs	r2, #136	; 0x88
 8000718:	0352      	lsls	r2, r2, #13
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a31      	ldr	r2, [pc, #196]	; (80007ec <MX_GPIO_Init+0x184>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f001 f845 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800072e:	0021      	movs	r1, r4
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2290      	movs	r2, #144	; 0x90
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	000c      	movs	r4, r1
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	193a      	adds	r2, r7, r4
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f001 f82f 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800075a:	0021      	movs	r1, r4
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2287      	movs	r2, #135	; 0x87
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	000c      	movs	r4, r1
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	193b      	adds	r3, r7, r4
 800077a:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_GPIO_Init+0x180>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f001 f81a 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	22c0      	movs	r2, #192	; 0xc0
 8000788:	00d2      	lsls	r2, r2, #3
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2288      	movs	r2, #136	; 0x88
 8000790:	0352      	lsls	r2, r2, #13
 8000792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	193a      	adds	r2, r7, r4
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 f808 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a8:	0021      	movs	r1, r4
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2288      	movs	r2, #136	; 0x88
 80007b4:	0352      	lsls	r2, r2, #13
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <MX_GPIO_Init+0x180>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f000 fff7 	bl	80017b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 ffc0 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007d4:	2007      	movs	r0, #7
 80007d6:	f000 ffd2 	bl	800177e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b00b      	add	sp, #44	; 0x2c
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400
 80007ec:	48000800 	.word	0x48000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	000a      	movs	r2, r1
 8000806:	1cbb      	adds	r3, r7, #2
 8000808:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <LCD_setRST+0x24>)
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <LCD_setRST+0x24>)
 8000812:	1cba      	adds	r2, r7, #2
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	809a      	strh	r2, [r3, #4]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000030c 	.word	0x2000030c

08000824 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	000a      	movs	r2, r1
 800082e:	1cbb      	adds	r3, r7, #2
 8000830:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <LCD_setCE+0x24>)
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <LCD_setCE+0x24>)
 800083a:	1cba      	adds	r2, r7, #2
 800083c:	8812      	ldrh	r2, [r2, #0]
 800083e:	819a      	strh	r2, [r3, #12]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000030c 	.word	0x2000030c

0800084c <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	000a      	movs	r2, r1
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <LCD_setDC+0x24>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <LCD_setDC+0x24>)
 8000862:	1cba      	adds	r2, r7, #2
 8000864:	8812      	ldrh	r2, [r2, #0]
 8000866:	829a      	strh	r2, [r3, #20]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000030c 	.word	0x2000030c

08000874 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	000a      	movs	r2, r1
 800087e:	1cbb      	adds	r3, r7, #2
 8000880:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <LCD_setDIN+0x24>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <LCD_setDIN+0x24>)
 800088a:	1cba      	adds	r2, r7, #2
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	839a      	strh	r2, [r3, #28]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000030c 	.word	0x2000030c

0800089c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	000a      	movs	r2, r1
 80008a6:	1cbb      	adds	r3, r7, #2
 80008a8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <LCD_setCLK+0x24>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <LCD_setCLK+0x24>)
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000030c 	.word	0x2000030c

080008c4 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	0002      	movs	r2, r0
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e029      	b.n	800092e <LCD_send+0x6a>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <LCD_send+0x80>)
 80008dc:	6998      	ldr	r0, [r3, #24]
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <LCD_send+0x80>)
 80008e0:	8b99      	ldrh	r1, [r3, #28]
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	250f      	movs	r5, #15
 80008e8:	197b      	adds	r3, r7, r5
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2407      	movs	r4, #7
 80008ee:	1ae3      	subs	r3, r4, r3
 80008f0:	411a      	asrs	r2, r3
 80008f2:	0013      	movs	r3, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	4013      	ands	r3, r2
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4193      	sbcs	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	001a      	movs	r2, r3
 8000900:	f001 f8ca 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <LCD_send+0x80>)
 8000906:	6a18      	ldr	r0, [r3, #32]
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <LCD_send+0x80>)
 800090a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800090c:	2201      	movs	r2, #1
 800090e:	0019      	movs	r1, r3
 8000910:	f001 f8c2 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <LCD_send+0x80>)
 8000916:	6a18      	ldr	r0, [r3, #32]
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <LCD_send+0x80>)
 800091a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800091c:	2200      	movs	r2, #0
 800091e:	0019      	movs	r1, r3
 8000920:	f001 f8ba 	bl	8001a98 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000924:	197b      	adds	r3, r7, r5
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	197b      	adds	r3, r7, r5
 800092a:	3201      	adds	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d9d0      	bls.n	80008da <LCD_send+0x16>
  }
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b004      	add	sp, #16
 8000940:	bdb0      	pop	{r4, r5, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	2000030c 	.word	0x2000030c

08000948 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	1c0a      	adds	r2, r1, #0
 8000958:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11d      	bne.n	800099e <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <LCD_write+0x98>)
 8000964:	6918      	ldr	r0, [r3, #16]
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <LCD_write+0x98>)
 8000968:	8a9b      	ldrh	r3, [r3, #20]
 800096a:	2200      	movs	r2, #0
 800096c:	0019      	movs	r1, r3
 800096e:	f001 f893 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <LCD_write+0x98>)
 8000974:	6898      	ldr	r0, [r3, #8]
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <LCD_write+0x98>)
 8000978:	899b      	ldrh	r3, [r3, #12]
 800097a:	2200      	movs	r2, #0
 800097c:	0019      	movs	r1, r3
 800097e:	f001 f88b 	bl	8001a98 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff9c 	bl	80008c4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <LCD_write+0x98>)
 800098e:	6898      	ldr	r0, [r3, #8]
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <LCD_write+0x98>)
 8000992:	899b      	ldrh	r3, [r3, #12]
 8000994:	2201      	movs	r2, #1
 8000996:	0019      	movs	r1, r3
 8000998:	f001 f87e 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 800099c:	e01c      	b.n	80009d8 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <LCD_write+0x98>)
 80009a0:	6918      	ldr	r0, [r3, #16]
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <LCD_write+0x98>)
 80009a4:	8a9b      	ldrh	r3, [r3, #20]
 80009a6:	2201      	movs	r2, #1
 80009a8:	0019      	movs	r1, r3
 80009aa:	f001 f875 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <LCD_write+0x98>)
 80009b0:	6898      	ldr	r0, [r3, #8]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <LCD_write+0x98>)
 80009b4:	899b      	ldrh	r3, [r3, #12]
 80009b6:	2200      	movs	r2, #0
 80009b8:	0019      	movs	r1, r3
 80009ba:	f001 f86d 	bl	8001a98 <HAL_GPIO_WritePin>
    LCD_send(data);
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff ff7e 	bl	80008c4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <LCD_write+0x98>)
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <LCD_write+0x98>)
 80009ce:	899b      	ldrh	r3, [r3, #12]
 80009d0:	2201      	movs	r2, #1
 80009d2:	0019      	movs	r1, r3
 80009d4:	f001 f860 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000030c 	.word	0x2000030c

080009e4 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <LCD_init+0x68>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <LCD_init+0x68>)
 80009ee:	889b      	ldrh	r3, [r3, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	0019      	movs	r1, r3
 80009f4:	f001 f850 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <LCD_init+0x68>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <LCD_init+0x68>)
 80009fe:	889b      	ldrh	r3, [r3, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	0019      	movs	r1, r3
 8000a04:	f001 f848 	bl	8001a98 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2021      	movs	r0, #33	; 0x21
 8000a0c:	f7ff ff9c 	bl	8000948 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000a10:	2100      	movs	r1, #0
 8000a12:	20b8      	movs	r0, #184	; 0xb8
 8000a14:	f7ff ff98 	bl	8000948 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f7ff ff94 	bl	8000948 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000a20:	2100      	movs	r1, #0
 8000a22:	2014      	movs	r0, #20
 8000a24:	f7ff ff90 	bl	8000948 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff ff8c 	bl	8000948 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000a30:	2100      	movs	r1, #0
 8000a32:	200c      	movs	r0, #12
 8000a34:	f7ff ff88 	bl	8000948 <LCD_write>
  LCD_clrScr();
 8000a38:	f000 f878 	bl	8000b2c <LCD_clrScr>
  lcd.inverttext = false;
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <LCD_init+0x6c>)
 8000a3e:	23fc      	movs	r3, #252	; 0xfc
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	2100      	movs	r1, #0
 8000a44:	54d1      	strb	r1, [r2, r3]
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000030c 	.word	0x2000030c
 8000a50:	20000110 	.word	0x20000110

08000a54 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e030      	b.n	8000ac8 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <LCD_putChar+0x84>)
 8000a68:	23fc      	movs	r3, #252	; 0xfc
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4053      	eors	r3, r2
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d011      	beq.n	8000a9c <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b20      	subs	r3, #32
 8000a7e:	001a      	movs	r2, r3
 8000a80:	4916      	ldr	r1, [pc, #88]	; (8000adc <LCD_putChar+0x88>)
 8000a82:	0013      	movs	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	18ca      	adds	r2, r1, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2101      	movs	r1, #1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff57 	bl	8000948 <LCD_write>
 8000a9a:	e012      	b.n	8000ac2 <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3b20      	subs	r3, #32
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	490d      	ldr	r1, [pc, #52]	; (8000adc <LCD_putChar+0x88>)
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	18ca      	adds	r2, r1, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ff43 	bl	8000948 <LCD_write>
  for(int i = 0; i < 6; i++){
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	ddcb      	ble.n	8000a66 <LCD_putChar+0x12>
  }
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b004      	add	sp, #16
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000110 	.word	0x20000110
 8000adc:	08003c60 	.word	0x08003c60

08000ae0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	0008      	movs	r0, r1
 8000aea:	0011      	movs	r1, r2
 8000aec:	1cfb      	adds	r3, r7, #3
 8000aee:	1c02      	adds	r2, r0, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	1cbb      	adds	r3, r7, #2
 8000af4:	1c0a      	adds	r2, r1, #0
 8000af6:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 8000af8:	1cbb      	adds	r3, r7, #2
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	1cfb      	adds	r3, r7, #3
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f830 	bl	8000b68 <LCD_goXY>
  while(*str){
 8000b08:	e006      	b.n	8000b18 <LCD_print+0x38>
    LCD_putChar(*str++);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff9e 	bl	8000a54 <LCD_putChar>
  while(*str){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f4      	bne.n	8000b0a <LCD_print+0x2a>
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e00b      	b.n	8000b50 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff04 	bl	8000948 <LCD_write>
    lcd.buffer[i] = 0;
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <LCD_clrScr+0x38>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	23fc      	movs	r3, #252	; 0xfc
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dbee      	blt.n	8000b38 <LCD_clrScr+0xc>
  }
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000110 	.word	0x20000110

08000b68 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	1c0a      	adds	r2, r1, #0
 8000b78:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	4252      	negs	r2, r2
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fedd 	bl	8000948 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8000b8e:	1dbb      	adds	r3, r7, #6
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2240      	movs	r2, #64	; 0x40
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fed4 	bl	8000948 <LCD_write>
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	f7ff ffd9 	bl	8000b68 <LCD_goXY>
  for(int i = 0; i < 6; i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e016      	b.n	8000bea <LCD_refreshScr+0x42>
    for(int j = 0; j < LCD_WIDTH; j++){
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	e00d      	b.n	8000bde <LCD_refreshScr+0x36>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2254      	movs	r2, #84	; 0x54
 8000bc6:	435a      	muls	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LCD_refreshScr+0x54>)
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff feb8 	bl	8000948 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++){
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2b53      	cmp	r3, #83	; 0x53
 8000be2:	ddee      	ble.n	8000bc2 <LCD_refreshScr+0x1a>
  for(int i = 0; i < 6; i++){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	dde5      	ble.n	8000bbc <LCD_refreshScr+0x14>
    }
  }
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000110 	.word	0x20000110

08000c00 <LCD_setPixel>:
}

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0004      	movs	r4, r0
 8000c08:	0008      	movs	r0, r1
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	1c22      	adds	r2, r4, #0
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	1c02      	adds	r2, r0, #0
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	1d7b      	adds	r3, r7, #5
 8000c1a:	1c0a      	adds	r2, r1, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
  if(x >= LCD_WIDTH)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b53      	cmp	r3, #83	; 0x53
 8000c24:	d902      	bls.n	8000c2c <LCD_setPixel+0x2c>
    x = LCD_WIDTH - 1;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2253      	movs	r2, #83	; 0x53
 8000c2a:	701a      	strb	r2, [r3, #0]
  if(y >= LCD_HEIGHT)
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b2f      	cmp	r3, #47	; 0x2f
 8000c32:	d902      	bls.n	8000c3a <LCD_setPixel+0x3a>
    y = LCD_HEIGHT - 1;
 8000c34:	1dbb      	adds	r3, r7, #6
 8000c36:	222f      	movs	r2, #47	; 0x2f
 8000c38:	701a      	strb	r2, [r3, #0]
    
  if(pixel != false){
 8000c3a:	1d7b      	adds	r3, r7, #5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d01f      	beq.n	8000c82 <LCD_setPixel+0x82>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	0001      	movs	r1, r0
 8000c50:	2354      	movs	r3, #84	; 0x54
 8000c52:	434b      	muls	r3, r1
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <LCD_setPixel+0xcc>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2107      	movs	r1, #7
 8000c62:	400b      	ands	r3, r1
 8000c64:	2101      	movs	r1, #1
 8000c66:	4099      	lsls	r1, r3
 8000c68:	000b      	movs	r3, r1
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b259      	sxtb	r1, r3
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	2354      	movs	r3, #84	; 0x54
 8000c76:	4343      	muls	r3, r0
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	b2c9      	uxtb	r1, r1
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <LCD_setPixel+0xcc>)
 8000c7e:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8000c80:	e020      	b.n	8000cc4 <LCD_setPixel+0xc4>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	b2d8      	uxtb	r0, r3
 8000c8e:	0001      	movs	r1, r0
 8000c90:	2354      	movs	r3, #84	; 0x54
 8000c92:	434b      	muls	r3, r1
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LCD_setPixel+0xcc>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	1dba      	adds	r2, r7, #6
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	000a      	movs	r2, r1
 8000caa:	b252      	sxtb	r2, r2
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	b252      	sxtb	r2, r2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	b259      	sxtb	r1, r3
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	2354      	movs	r3, #84	; 0x54
 8000cba:	4343      	muls	r3, r0
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	4a02      	ldr	r2, [pc, #8]	; (8000ccc <LCD_setPixel+0xcc>)
 8000cc2:	54d1      	strb	r1, [r2, r3]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b003      	add	sp, #12
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	20000110 	.word	0x20000110

08000cd0 <printEndScreen>:
struct SnakeGameAttr CurrentGame;
struct SnakeStruct ThisSnake;
struct Food meaty;

void printEndScreen()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	LCD_clrScr();
 8000cd6:	f7ff ff29 	bl	8000b2c <LCD_clrScr>
	char scoreString[5];
	itoa(CurrentGame.score, scoreString, 10);
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <printEndScreen+0x48>)
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	f001 ff45 	bl	8002b74 <itoa>
	LCD_print("Game over!", 10, 2);
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <printEndScreen+0x4c>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	210a      	movs	r1, #10
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fef5 	bl	8000ae0 <LCD_print>
	LCD_print("Score", 15, 3);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <printEndScreen+0x50>)
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff feef 	bl	8000ae0 <LCD_print>
	LCD_print(scoreString, 50, 3);
 8000d02:	003b      	movs	r3, r7
 8000d04:	2203      	movs	r2, #3
 8000d06:	2132      	movs	r1, #50	; 0x32
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fee9 	bl	8000ae0 <LCD_print>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000334 	.word	0x20000334
 8000d1c:	08003c4c 	.word	0x08003c4c
 8000d20:	08003c58 	.word	0x08003c58

08000d24 <printCurrentGameScreen>:

void printCurrentGameScreen()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	LCD_clrScr();
 8000d2a:	f7ff feff 	bl	8000b2c <LCD_clrScr>
							meaty.x_pos +(i-1),
							meaty.y_pos + (j-1), 1);
			}
		}
	 */
	LCD_setPixel(meaty.x_pos, meaty.y_pos+1, 1);
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d30:	7818      	ldrb	r0, [r3, #0]
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <LCD_setPixel>
	LCD_setPixel(meaty.x_pos+1, meaty.y_pos, 1);
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	0019      	movs	r1, r3
 8000d52:	f7ff ff55 	bl	8000c00 <LCD_setPixel>
	LCD_setPixel(meaty.x_pos, meaty.y_pos-1, 1);
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d58:	7818      	ldrb	r0, [r3, #0]
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2201      	movs	r2, #1
 8000d64:	0019      	movs	r1, r3
 8000d66:	f7ff ff4b 	bl	8000c00 <LCD_setPixel>
	LCD_setPixel(meaty.x_pos-1, meaty.y_pos, 1);
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <printCurrentGameScreen+0xf8>)
 8000d74:	785b      	ldrb	r3, [r3, #1]
 8000d76:	2201      	movs	r2, #1
 8000d78:	0019      	movs	r1, r3
 8000d7a:	f7ff ff41 	bl	8000c00 <LCD_setPixel>
	//draw snake:
	for(uint16_t l = ThisSnake.length; l > 0 ; l--)
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <printCurrentGameScreen+0xfc>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	1dbb      	adds	r3, r7, #6
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	e03e      	b.n	8000e06 <printCurrentGameScreen+0xe2>
	{
		//sward snake part
		for(uint8_t i = 0; i < 3; i++)
 8000d88:	1d7b      	adds	r3, r7, #5
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e031      	b.n	8000df4 <printCurrentGameScreen+0xd0>
		{
			for(uint8_t j = 0; j < 3; j++)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e024      	b.n	8000de2 <printCurrentGameScreen+0xbe>
			{
				LCD_setPixel(
							ThisSnake.segments[l-1][0] +(i-1),
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <printCurrentGameScreen+0xfc>)
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	1d7b      	adds	r3, r7, #5
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	b2db      	uxtb	r3, r3
				LCD_setPixel(
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b2d8      	uxtb	r0, r3
							ThisSnake.segments[l-1][1] + (j-1), 1);
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <printCurrentGameScreen+0xfc>)
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	b2db      	uxtb	r3, r3
				LCD_setPixel(
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f7ff ff14 	bl	8000c00 <LCD_setPixel>
			for(uint8_t j = 0; j < 3; j++)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	3201      	adds	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d9d6      	bls.n	8000d98 <printCurrentGameScreen+0x74>
		for(uint8_t i = 0; i < 3; i++)
 8000dea:	1d7b      	adds	r3, r7, #5
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	1d7b      	adds	r3, r7, #5
 8000df0:	3201      	adds	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1d7b      	adds	r3, r7, #5
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d9c9      	bls.n	8000d90 <printCurrentGameScreen+0x6c>
	for(uint16_t l = ThisSnake.length; l > 0 ; l--)
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	881a      	ldrh	r2, [r3, #0]
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	3a01      	subs	r2, #1
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	1dbb      	adds	r3, r7, #6
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1bc      	bne.n	8000d88 <printCurrentGameScreen+0x64>
			}
		}
	}

	LCD_refreshScr();
 8000e0e:	f7ff fecb 	bl	8000ba8 <LCD_refreshScr>
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	200006bc 	.word	0x200006bc
 8000e20:	20000338 	.word	0x20000338

08000e24 <initGame>:

void initGame()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	CurrentGame.gameOver = 0;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <initGame+0x84>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	CurrentGame.score = 0;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <initGame+0x84>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	805a      	strh	r2, [r3, #2]

	//init snake
	ThisSnake.length = 2;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <initGame+0x88>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	701a      	strb	r2, [r3, #0]
	ThisSnake.segments[0][0] = 84/2;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <initGame+0x88>)
 8000e3c:	222a      	movs	r2, #42	; 0x2a
 8000e3e:	705a      	strb	r2, [r3, #1]
	ThisSnake.segments[0][1] = 48/2;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <initGame+0x88>)
 8000e42:	2218      	movs	r2, #24
 8000e44:	709a      	strb	r2, [r3, #2]
	ThisSnake.segments[1][0] = ThisSnake.segments[0][0] - 3;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <initGame+0x88>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	3b03      	subs	r3, #3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <initGame+0x88>)
 8000e50:	70da      	strb	r2, [r3, #3]
	ThisSnake.segments[1][1] = ThisSnake.segments[0][1];
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <initGame+0x88>)
 8000e54:	789a      	ldrb	r2, [r3, #2]
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <initGame+0x88>)
 8000e58:	711a      	strb	r2, [r3, #4]
	ThisSnake.currentDirection = right;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <initGame+0x88>)
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <initGame+0x8c>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	5499      	strb	r1, [r3, r2]

	//init fruit
	meaty.x_pos = (rand()%27) * 3;
 8000e62:	f001 fe8b 	bl	8002b7c <rand>
 8000e66:	0003      	movs	r3, r0
 8000e68:	211b      	movs	r1, #27
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fac6 	bl	80003fc <__aeabi_idivmod>
 8000e70:	000b      	movs	r3, r1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	1c1a      	adds	r2, r3, #0
 8000e76:	1c13      	adds	r3, r2, #0
 8000e78:	18db      	adds	r3, r3, r3
 8000e7a:	189b      	adds	r3, r3, r2
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <initGame+0x90>)
 8000e80:	701a      	strb	r2, [r3, #0]
	meaty.y_pos = (rand()%15) * 3;
 8000e82:	f001 fe7b 	bl	8002b7c <rand>
 8000e86:	0003      	movs	r3, r0
 8000e88:	210f      	movs	r1, #15
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fab6 	bl	80003fc <__aeabi_idivmod>
 8000e90:	000b      	movs	r3, r1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	1c1a      	adds	r2, r3, #0
 8000e96:	1c13      	adds	r3, r2, #0
 8000e98:	18db      	adds	r3, r3, r3
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <initGame+0x90>)
 8000ea0:	705a      	strb	r2, [r3, #1]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000334 	.word	0x20000334
 8000eac:	20000338 	.word	0x20000338
 8000eb0:	00000381 	.word	0x00000381
 8000eb4:	200006bc 	.word	0x200006bc

08000eb8 <selfCollisionCheck>:

uint8_t selfCollisionCheck()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	uint8_t collision = 0;
 8000ebe:	1d7b      	adds	r3, r7, #5
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

	for(uint16_t l = ThisSnake.length; l > 1 ; l--)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <selfCollisionCheck+0x68>)
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	801a      	strh	r2, [r3, #0]
 8000ecc:	e01e      	b.n	8000f0c <selfCollisionCheck+0x54>
	{
		if( (ThisSnake.segments[l-1][0] == ThisSnake.segments[0][0]) &&
 8000ece:	1dbb      	adds	r3, r7, #6
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <selfCollisionCheck+0x68>)
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <selfCollisionCheck+0x68>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d10d      	bne.n	8000f02 <selfCollisionCheck+0x4a>
				(ThisSnake.segments[l-1][1] == ThisSnake.segments[0][1]) )
 8000ee6:	1dbb      	adds	r3, r7, #6
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <selfCollisionCheck+0x68>)
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <selfCollisionCheck+0x68>)
 8000ef8:	789b      	ldrb	r3, [r3, #2]
		if( (ThisSnake.segments[l-1][0] == ThisSnake.segments[0][0]) &&
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d101      	bne.n	8000f02 <selfCollisionCheck+0x4a>
		{
			return 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00a      	b.n	8000f18 <selfCollisionCheck+0x60>
	for(uint16_t l = ThisSnake.length; l > 1 ; l--)
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d8dc      	bhi.n	8000ece <selfCollisionCheck+0x16>
		}
	}

	return collision;
 8000f14:	1d7b      	adds	r3, r7, #5
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000338 	.word	0x20000338

08000f24 <updateSnake>:

void updateSnake()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	//Update snake body
	for(uint16_t l = ThisSnake.length; l > 1 ; l--)
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <updateSnake+0x14c>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	e04a      	b.n	8000fca <updateSnake+0xa6>
	{
		if(!( (ThisSnake.segments[l-1][0] == ThisSnake.segments[l-2][0]) &&
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <updateSnake+0x14c>)
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4949      	ldr	r1, [pc, #292]	; (8001070 <updateSnake+0x14c>)
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	18cb      	adds	r3, r1, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d111      	bne.n	8000f7c <updateSnake+0x58>
				(ThisSnake.segments[l-1][1] == ThisSnake.segments[l-2][1])))
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a44      	ldr	r2, [pc, #272]	; (8001070 <updateSnake+0x14c>)
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	3302      	adds	r3, #2
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4940      	ldr	r1, [pc, #256]	; (8001070 <updateSnake+0x14c>)
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	18cb      	adds	r3, r1, r3
 8000f74:	3302      	adds	r3, #2
 8000f76:	781b      	ldrb	r3, [r3, #0]
		if(!( (ThisSnake.segments[l-1][0] == ThisSnake.segments[l-2][0]) &&
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d021      	beq.n	8000fc0 <updateSnake+0x9c>
		{
			ThisSnake.segments[l-1][0] = ThisSnake.segments[l-2][0];
 8000f7c:	1dbb      	adds	r3, r7, #6
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	1e9a      	subs	r2, r3, #2
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4939      	ldr	r1, [pc, #228]	; (8001070 <updateSnake+0x14c>)
 8000f8a:	0052      	lsls	r2, r2, #1
 8000f8c:	188a      	adds	r2, r1, r2
 8000f8e:	3201      	adds	r2, #1
 8000f90:	7811      	ldrb	r1, [r2, #0]
 8000f92:	4a37      	ldr	r2, [pc, #220]	; (8001070 <updateSnake+0x14c>)
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	18d3      	adds	r3, r2, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	1c0a      	adds	r2, r1, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
			ThisSnake.segments[l-1][1] = ThisSnake.segments[l-2][1];
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	1e9a      	subs	r2, r3, #2
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	4931      	ldr	r1, [pc, #196]	; (8001070 <updateSnake+0x14c>)
 8000fac:	0052      	lsls	r2, r2, #1
 8000fae:	188a      	adds	r2, r1, r2
 8000fb0:	3202      	adds	r2, #2
 8000fb2:	7811      	ldrb	r1, [r2, #0]
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <updateSnake+0x14c>)
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	3302      	adds	r3, #2
 8000fbc:	1c0a      	adds	r2, r1, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	for(uint16_t l = ThisSnake.length; l > 1 ; l--)
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d8b0      	bhi.n	8000f34 <updateSnake+0x10>
		}
	}

	if(ThisSnake.currentDirection == right)
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <updateSnake+0x14c>)
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <updateSnake+0x150>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <updateSnake+0xd6>
	{
		if(ThisSnake.segments[0][0] >= 83)
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <updateSnake+0x14c>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b52      	cmp	r3, #82	; 0x52
 8000fe2:	d903      	bls.n	8000fec <updateSnake+0xc8>
		{
			ThisSnake.segments[0][0] = 0;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <updateSnake+0x14c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	705a      	strb	r2, [r3, #1]
		else
		{
			ThisSnake.segments[0][1] = ThisSnake.segments[0][1] - 3;
		}
	}
}
 8000fea:	e03c      	b.n	8001066 <updateSnake+0x142>
			ThisSnake.segments[0][0] = ThisSnake.segments[0][0] + 3;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <updateSnake+0x14c>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	3303      	adds	r3, #3
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <updateSnake+0x14c>)
 8000ff6:	705a      	strb	r2, [r3, #1]
}
 8000ff8:	e035      	b.n	8001066 <updateSnake+0x142>
	else if(ThisSnake.currentDirection == down)
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <updateSnake+0x14c>)
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <updateSnake+0x150>)
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10e      	bne.n	8001022 <updateSnake+0xfe>
		if(ThisSnake.segments[0][1] >= 48)
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <updateSnake+0x14c>)
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	2b2f      	cmp	r3, #47	; 0x2f
 800100a:	d903      	bls.n	8001014 <updateSnake+0xf0>
			ThisSnake.segments[0][1] = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <updateSnake+0x14c>)
 800100e:	2200      	movs	r2, #0
 8001010:	709a      	strb	r2, [r3, #2]
}
 8001012:	e028      	b.n	8001066 <updateSnake+0x142>
			ThisSnake.segments[0][1] = ThisSnake.segments[0][1] + 3;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <updateSnake+0x14c>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	3303      	adds	r3, #3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <updateSnake+0x14c>)
 800101e:	709a      	strb	r2, [r3, #2]
}
 8001020:	e021      	b.n	8001066 <updateSnake+0x142>
	else if(ThisSnake.currentDirection == left)
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <updateSnake+0x14c>)
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <updateSnake+0x150>)
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d10e      	bne.n	800104a <updateSnake+0x126>
		if(ThisSnake.segments[0][0] == 0)
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <updateSnake+0x14c>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <updateSnake+0x118>
			ThisSnake.segments[0][0] = 84;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <updateSnake+0x14c>)
 8001036:	2254      	movs	r2, #84	; 0x54
 8001038:	705a      	strb	r2, [r3, #1]
}
 800103a:	e014      	b.n	8001066 <updateSnake+0x142>
			ThisSnake.segments[0][0] = ThisSnake.segments[0][0] - 3;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <updateSnake+0x14c>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	3b03      	subs	r3, #3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <updateSnake+0x14c>)
 8001046:	705a      	strb	r2, [r3, #1]
}
 8001048:	e00d      	b.n	8001066 <updateSnake+0x142>
		if(ThisSnake.segments[0][1] == 0)
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <updateSnake+0x14c>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <updateSnake+0x136>
			ThisSnake.segments[0][1] = 48;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <updateSnake+0x14c>)
 8001054:	2230      	movs	r2, #48	; 0x30
 8001056:	709a      	strb	r2, [r3, #2]
}
 8001058:	e005      	b.n	8001066 <updateSnake+0x142>
			ThisSnake.segments[0][1] = ThisSnake.segments[0][1] - 3;
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <updateSnake+0x14c>)
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	3b03      	subs	r3, #3
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <updateSnake+0x14c>)
 8001064:	709a      	strb	r2, [r3, #2]
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000338 	.word	0x20000338
 8001074:	00000381 	.word	0x00000381

08001078 <updateGame>:

void updateGame(uint8_t inputDirection)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	701a      	strb	r2, [r3, #0]
	//autopilot
	//inputDirection = rand() % 4;

	//update direction
	if(inputDirection != 5)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d028      	beq.n	80010de <updateGame+0x66>
	{
		if( ((inputDirection == up) && (ThisSnake.currentDirection != down)) ||
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d104      	bne.n	800109e <updateGame+0x26>
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <updateGame+0x148>)
 8001096:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <updateGame+0x14c>)
 8001098:	5c9b      	ldrb	r3, [r3, r2]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d11a      	bne.n	80010d4 <updateGame+0x5c>
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d104      	bne.n	80010b0 <updateGame+0x38>
				((inputDirection == down) && (ThisSnake.currentDirection != up)) ||
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <updateGame+0x148>)
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <updateGame+0x14c>)
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d111      	bne.n	80010d4 <updateGame+0x5c>
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d104      	bne.n	80010c2 <updateGame+0x4a>
				((inputDirection == left) && (ThisSnake.currentDirection != right)) ||
 80010b8:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <updateGame+0x148>)
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <updateGame+0x14c>)
 80010bc:	5c9b      	ldrb	r3, [r3, r2]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d108      	bne.n	80010d4 <updateGame+0x5c>
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <updateGame+0x66>
				((inputDirection == right) && (ThisSnake.currentDirection != left)) )
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <updateGame+0x148>)
 80010cc:	4a3d      	ldr	r2, [pc, #244]	; (80011c4 <updateGame+0x14c>)
 80010ce:	5c9b      	ldrb	r3, [r3, r2]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d004      	beq.n	80010de <updateGame+0x66>
		{
			ThisSnake.currentDirection = inputDirection;
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <updateGame+0x148>)
 80010d6:	1dfa      	adds	r2, r7, #7
 80010d8:	493a      	ldr	r1, [pc, #232]	; (80011c4 <updateGame+0x14c>)
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	545a      	strb	r2, [r3, r1]
		}

	}

	updateSnake();
 80010de:	f7ff ff21 	bl	8000f24 <updateSnake>
	if(CurrentGame.gameOver)
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <updateGame+0x150>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <updateGame+0x78>
	{
		printEndScreen();
 80010ea:	f7ff fdf1 	bl	8000cd0 <printEndScreen>
 80010ee:	e001      	b.n	80010f4 <updateGame+0x7c>
	}
	else
	{
		printCurrentGameScreen();
 80010f0:	f7ff fe18 	bl	8000d24 <printCurrentGameScreen>
	}

	//primitive collision detection with food
	if((ThisSnake.segments[0][0] == meaty.x_pos) && (ThisSnake.segments[0][1] == meaty.y_pos))
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <updateGame+0x148>)
 80010f6:	785a      	ldrb	r2, [r3, #1]
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <updateGame+0x154>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d153      	bne.n	80011a8 <updateGame+0x130>
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <updateGame+0x148>)
 8001102:	789a      	ldrb	r2, [r3, #2]
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <updateGame+0x154>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	429a      	cmp	r2, r3
 800110a:	d14d      	bne.n	80011a8 <updateGame+0x130>
	{
		CurrentGame.score++;
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <updateGame+0x150>)
 800110e:	885b      	ldrh	r3, [r3, #2]
 8001110:	3301      	adds	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <updateGame+0x150>)
 8001116:	805a      	strh	r2, [r3, #2]
		ThisSnake.segments[ThisSnake.length][0] = ThisSnake.segments[ThisSnake.length-1][0];
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <updateGame+0x148>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <updateGame+0x148>)
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	0010      	movs	r0, r2
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <updateGame+0x148>)
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3301      	adds	r3, #1
 800112c:	7819      	ldrb	r1, [r3, #0]
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <updateGame+0x148>)
 8001130:	0043      	lsls	r3, r0, #1
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	3301      	adds	r3, #1
 8001136:	1c0a      	adds	r2, r1, #0
 8001138:	701a      	strb	r2, [r3, #0]
		ThisSnake.segments[ThisSnake.length][1] = ThisSnake.segments[ThisSnake.length-1][1];
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <updateGame+0x148>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <updateGame+0x148>)
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	0010      	movs	r0, r2
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <updateGame+0x148>)
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	18d3      	adds	r3, r2, r3
 800114c:	3302      	adds	r3, #2
 800114e:	7819      	ldrb	r1, [r3, #0]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <updateGame+0x148>)
 8001152:	0043      	lsls	r3, r0, #1
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	3302      	adds	r3, #2
 8001158:	1c0a      	adds	r2, r1, #0
 800115a:	701a      	strb	r2, [r3, #0]
		ThisSnake.length++;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <updateGame+0x148>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <updateGame+0x148>)
 8001166:	701a      	strb	r2, [r3, #0]

		meaty.x_pos = (rand()%27) * 3;
 8001168:	f001 fd08 	bl	8002b7c <rand>
 800116c:	0003      	movs	r3, r0
 800116e:	211b      	movs	r1, #27
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff f943 	bl	80003fc <__aeabi_idivmod>
 8001176:	000b      	movs	r3, r1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	1c1a      	adds	r2, r3, #0
 800117c:	1c13      	adds	r3, r2, #0
 800117e:	18db      	adds	r3, r3, r3
 8001180:	189b      	adds	r3, r3, r2
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <updateGame+0x154>)
 8001186:	701a      	strb	r2, [r3, #0]
		meaty.y_pos = (rand()%15) * 3;
 8001188:	f001 fcf8 	bl	8002b7c <rand>
 800118c:	0003      	movs	r3, r0
 800118e:	210f      	movs	r1, #15
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff f933 	bl	80003fc <__aeabi_idivmod>
 8001196:	000b      	movs	r3, r1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	1c1a      	adds	r2, r3, #0
 800119c:	1c13      	adds	r3, r2, #0
 800119e:	18db      	adds	r3, r3, r3
 80011a0:	189b      	adds	r3, r3, r2
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <updateGame+0x154>)
 80011a6:	705a      	strb	r2, [r3, #1]
	}
	if(selfCollisionCheck())
 80011a8:	f7ff fe86 	bl	8000eb8 <selfCollisionCheck>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d002      	beq.n	80011b6 <updateGame+0x13e>
	{
		CurrentGame.gameOver = 1;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <updateGame+0x150>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	}
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000338 	.word	0x20000338
 80011c4:	00000381 	.word	0x00000381
 80011c8:	20000334 	.word	0x20000334
 80011cc:	200006bc 	.word	0x200006bc

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0549      	lsls	r1, r1, #21
 80011f8:	430a      	orrs	r2, r1
 80011fa:	61da      	str	r2, [r3, #28]
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_MspInit+0x44>)
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	4013      	ands	r3, r2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	2414      	movs	r4, #20
 8001222:	193b      	adds	r3, r7, r4
 8001224:	0018      	movs	r0, r3
 8001226:	2314      	movs	r3, #20
 8001228:	001a      	movs	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	f001 fe28 	bl	8002e80 <memset>
  if(huart->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_UART_MspInit+0x90>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d132      	bne.n	80012a0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x94>)
 800123c:	69da      	ldr	r2, [r3, #28]
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x94>)
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0289      	lsls	r1, r1, #10
 8001244:	430a      	orrs	r2, r1
 8001246:	61da      	str	r2, [r3, #28]
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x94>)
 800124a:	69da      	ldr	r2, [r3, #28]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x94>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x94>)
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0289      	lsls	r1, r1, #10
 8001260:	430a      	orrs	r2, r1
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x94>)
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001272:	0021      	movs	r1, r4
 8001274:	187b      	adds	r3, r7, r1
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2202      	movs	r2, #2
 800127e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2201      	movs	r2, #1
 8001290:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	187a      	adds	r2, r7, r1
 8001294:	2390      	movs	r3, #144	; 0x90
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f000 fa8c 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b00b      	add	sp, #44	; 0x2c
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f952 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012e2:	2040      	movs	r0, #64	; 0x40
 80012e4:	f000 fbf6 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012e8:	2080      	movs	r0, #128	; 0x80
 80012ea:	f000 fbf3 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 fbee 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 fbe9 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	0018      	movs	r0, r3
 8001308:	f000 fbe4 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
  return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_kill>:

int _kill(int pid, int sig)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001328:	f001 fe00 	bl	8002f2c <__errno>
 800132c:	0003      	movs	r3, r0
 800132e:	2216      	movs	r2, #22
 8001330:	601a      	str	r2, [r3, #0]
  return -1;
 8001332:	2301      	movs	r3, #1
 8001334:	425b      	negs	r3, r3
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}

0800133e <_exit>:

void _exit (int status)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001346:	2301      	movs	r3, #1
 8001348:	425a      	negs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0011      	movs	r1, r2
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff ffe5 	bl	800131e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001354:	e7fe      	b.n	8001354 <_exit+0x16>

08001356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00a      	b.n	800137e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001368:	e000      	b.n	800136c <_read+0x16>
 800136a:	bf00      	nop
 800136c:	0001      	movs	r1, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf0      	blt.n	8001368 <_read+0x12>
  }

  return len;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b006      	add	sp, #24
 800138e:	bd80      	pop	{r7, pc}

08001390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e009      	b.n	80013b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	0018      	movs	r0, r3
 80013ac:	e000      	b.n	80013b0 <_write+0x20>
 80013ae:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf1      	blt.n	80013a2 <_write+0x12>
  }
  return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_close>:

int _close(int file)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	425b      	negs	r3, r3
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0192      	lsls	r2, r2, #6
 80013ec:	605a      	str	r2, [r3, #4]
  return 0;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_isatty>:

int _isatty(int file)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f001 fd6c 	bl	8002f2c <__errno>
 8001454:	0003      	movs	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	2301      	movs	r3, #1
 800145c:	425b      	negs	r3, r3
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	18d2      	adds	r2, r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b006      	add	sp, #24
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20002000 	.word	0x20002000
 8001480:	00000400 	.word	0x00000400
 8001484:	200006c0 	.word	0x200006c0
 8001488:	20000818 	.word	0x20000818

0800148c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800149c:	f7ff fff6 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopForever+0xe>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopForever+0x16>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014c6:	f001 fd37 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ca:	f7ff f809 	bl	80004e0 <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>
  ldr   r0, =_estack
 80014d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014dc:	08003fe4 	.word	0x08003fe4
  ldr r2, =_sbss
 80014e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014e4:	20000814 	.word	0x20000814

080014e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_IRQHandler>
	...

080014ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_Init+0x24>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_Init+0x24>)
 80014f6:	2110      	movs	r1, #16
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f809 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fe65 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40022000 	.word	0x40022000

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_InitTick+0x5c>)
 800151e:	681c      	ldr	r4, [r3, #0]
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	0019      	movs	r1, r3
 8001526:	23fa      	movs	r3, #250	; 0xfa
 8001528:	0098      	lsls	r0, r3, #2
 800152a:	f7fe fdf7 	bl	800011c <__udivsi3>
 800152e:	0003      	movs	r3, r0
 8001530:	0019      	movs	r1, r3
 8001532:	0020      	movs	r0, r4
 8001534:	f7fe fdf2 	bl	800011c <__udivsi3>
 8001538:	0003      	movs	r3, r0
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f92f 	bl	800179e <HAL_SYSTICK_Config>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d001      	beq.n	8001548 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e00f      	b.n	8001568 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d80b      	bhi.n	8001566 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	2301      	movs	r3, #1
 8001552:	425b      	negs	r3, r3
 8001554:	2200      	movs	r2, #0
 8001556:	0018      	movs	r0, r3
 8001558:	f000 f8fc 	bl	8001754 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_InitTick+0x64>)
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b003      	add	sp, #12
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	20000004 	.word	0x20000004
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	001a      	movs	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	18d2      	adds	r2, r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_IncTick+0x20>)
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	2000000c 	.word	0x2000000c
 800159c:	200006c4 	.word	0x200006c4

080015a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_GetTick+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	200006c4 	.word	0x200006c4

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	001a      	movs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	f7ff ffe0 	bl	80015a0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	2000000c 	.word	0x2000000c

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	0002      	movs	r2, r0
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b7f      	cmp	r3, #127	; 0x7f
 800160e:	d809      	bhi.n	8001624 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	001a      	movs	r2, r3
 8001616:	231f      	movs	r3, #31
 8001618:	401a      	ands	r2, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_EnableIRQ+0x30>)
 800161c:	2101      	movs	r1, #1
 800161e:	4091      	lsls	r1, r2
 8001620:	000a      	movs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
  }
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	0002      	movs	r2, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b7f      	cmp	r3, #127	; 0x7f
 8001644:	d828      	bhi.n	8001698 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001646:	4a2f      	ldr	r2, [pc, #188]	; (8001704 <__NVIC_SetPriority+0xd4>)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	33c0      	adds	r3, #192	; 0xc0
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	589b      	ldr	r3, [r3, r2]
 8001656:	1dfa      	adds	r2, r7, #7
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	0011      	movs	r1, r2
 800165c:	2203      	movs	r2, #3
 800165e:	400a      	ands	r2, r1
 8001660:	00d2      	lsls	r2, r2, #3
 8001662:	21ff      	movs	r1, #255	; 0xff
 8001664:	4091      	lsls	r1, r2
 8001666:	000a      	movs	r2, r1
 8001668:	43d2      	mvns	r2, r2
 800166a:	401a      	ands	r2, r3
 800166c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	401a      	ands	r2, r3
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	2303      	movs	r3, #3
 800167e:	4003      	ands	r3, r0
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001684:	481f      	ldr	r0, [pc, #124]	; (8001704 <__NVIC_SetPriority+0xd4>)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	430a      	orrs	r2, r1
 8001690:	33c0      	adds	r3, #192	; 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001696:	e031      	b.n	80016fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <__NVIC_SetPriority+0xd8>)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	0019      	movs	r1, r3
 80016a0:	230f      	movs	r3, #15
 80016a2:	400b      	ands	r3, r1
 80016a4:	3b08      	subs	r3, #8
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3306      	adds	r3, #6
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1dfa      	adds	r2, r7, #7
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	0011      	movs	r1, r2
 80016b8:	2203      	movs	r2, #3
 80016ba:	400a      	ands	r2, r1
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	21ff      	movs	r1, #255	; 0xff
 80016c0:	4091      	lsls	r1, r2
 80016c2:	000a      	movs	r2, r1
 80016c4:	43d2      	mvns	r2, r2
 80016c6:	401a      	ands	r2, r3
 80016c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	401a      	ands	r2, r3
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0018      	movs	r0, r3
 80016d8:	2303      	movs	r3, #3
 80016da:	4003      	ands	r3, r0
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <__NVIC_SetPriority+0xd8>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	001c      	movs	r4, r3
 80016e8:	230f      	movs	r3, #15
 80016ea:	4023      	ands	r3, r4
 80016ec:	3b08      	subs	r3, #8
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	430a      	orrs	r2, r1
 80016f2:	3306      	adds	r3, #6
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	18c3      	adds	r3, r0, r3
 80016f8:	3304      	adds	r3, #4
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b003      	add	sp, #12
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	045b      	lsls	r3, r3, #17
 800171c:	429a      	cmp	r2, r3
 800171e:	d301      	bcc.n	8001724 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001720:	2301      	movs	r3, #1
 8001722:	e010      	b.n	8001746 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <SysTick_Config+0x44>)
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3a01      	subs	r2, #1
 800172a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172c:	2301      	movs	r3, #1
 800172e:	425b      	negs	r3, r3
 8001730:	2103      	movs	r1, #3
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff ff7c 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x44>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x44>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	210f      	movs	r1, #15
 8001760:	187b      	adds	r3, r7, r1
 8001762:	1c02      	adds	r2, r0, #0
 8001764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	187b      	adds	r3, r7, r1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	0002      	movs	r2, r0
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b25b      	sxtb	r3, r3
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ff33 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ffaf 	bl	800170c <SysTick_Config>
 80017ae:	0003      	movs	r3, r0
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e14f      	b.n	8001a68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4091      	lsls	r1, r2
 80017d2:	000a      	movs	r2, r1
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_GPIO_Init+0x28>
 80017de:	e140      	b.n	8001a62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d005      	beq.n	80017f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d130      	bne.n	800185a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	409a      	lsls	r2, r3
 8001806:	0013      	movs	r3, r2
 8001808:	43da      	mvns	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	409a      	lsls	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	2201      	movs	r2, #1
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2203      	movs	r2, #3
 8001860:	4013      	ands	r3, r2
 8001862:	2b03      	cmp	r3, #3
 8001864:	d017      	beq.n	8001896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	4013      	ands	r3, r2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d123      	bne.n	80018ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	58d3      	ldr	r3, [r2, r3]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2207      	movs	r2, #7
 80018b4:	4013      	ands	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2107      	movs	r1, #7
 80018ce:	400b      	ands	r3, r1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	6939      	ldr	r1, [r7, #16]
 80018e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	401a      	ands	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	4013      	ands	r3, r2
 8001928:	d100      	bne.n	800192c <HAL_GPIO_Init+0x174>
 800192a:	e09a      	b.n	8001a62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001944:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	589b      	ldr	r3, [r3, r2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	43da      	mvns	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	2390      	movs	r3, #144	; 0x90
 800196c:	05db      	lsls	r3, r3, #23
 800196e:	429a      	cmp	r2, r3
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x1e2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a44      	ldr	r2, [pc, #272]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x1de>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a43      	ldr	r2, [pc, #268]	; (8001a8c <HAL_GPIO_Init+0x2d4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x1da>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <HAL_GPIO_Init+0x2d8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x1d6>
 800198a:	2303      	movs	r3, #3
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x1e4>
 800198e:	2305      	movs	r3, #5
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x1e4>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x1e4>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x1e4>
 800199a:	2300      	movs	r3, #0
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	2103      	movs	r1, #3
 80019a0:	400a      	ands	r2, r1
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43da      	mvns	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	035b      	lsls	r3, r3, #13
 80019d2:	4013      	ands	r3, r2
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43da      	mvns	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	039b      	lsls	r3, r3, #14
 80019fc:	4013      	ands	r3, r2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4013      	ands	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	40da      	lsrs	r2, r3
 8001a70:	1e13      	subs	r3, r2, #0
 8001a72:	d000      	beq.n	8001a76 <HAL_GPIO_Init+0x2be>
 8001a74:	e6a8      	b.n	80017c8 <HAL_GPIO_Init+0x10>
  } 
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b006      	add	sp, #24
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	0008      	movs	r0, r1
 8001aa2:	0011      	movs	r1, r2
 8001aa4:	1cbb      	adds	r3, r7, #2
 8001aa6:	1c02      	adds	r2, r0, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	1c7b      	adds	r3, r7, #1
 8001aac:	1c0a      	adds	r2, r1, #0
 8001aae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	1c7b      	adds	r3, r7, #1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab8:	1cbb      	adds	r3, r7, #2
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac2:	1cbb      	adds	r3, r7, #2
 8001ac4:	881a      	ldrh	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	0002      	movs	r2, r0
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	1dba      	adds	r2, r7, #6
 8001ae6:	8812      	ldrh	r2, [r2, #0]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d008      	beq.n	8001afe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001aee:	1dba      	adds	r2, r7, #6
 8001af0:	8812      	ldrh	r2, [r2, #0]
 8001af2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7fe fcb3 	bl	8000464 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e301      	b.n	8002122 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x1e>
 8001b28:	e08d      	b.n	8001c46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b2a:	4bc3      	ldr	r3, [pc, #780]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00e      	beq.n	8001b54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b36:	4bc0      	ldr	r3, [pc, #768]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x64>
 8001b42:	4bbd      	ldr	r3, [pc, #756]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4bb8      	ldr	r3, [pc, #736]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCC_OscConfig+0x56>
 8001b60:	e070      	b.n	8001c44 <HAL_RCC_OscConfig+0x138>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d000      	beq.n	8001b6c <HAL_RCC_OscConfig+0x60>
 8001b6a:	e06b      	b.n	8001c44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e2d8      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x7c>
 8001b78:	4baf      	ldr	r3, [pc, #700]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4bae      	ldr	r3, [pc, #696]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	0249      	lsls	r1, r1, #9
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e02f      	b.n	8001be8 <HAL_RCC_OscConfig+0xdc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x9e>
 8001b90:	4ba9      	ldr	r3, [pc, #676]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4ba8      	ldr	r3, [pc, #672]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	49a9      	ldr	r1, [pc, #676]	; (8001e3c <HAL_RCC_OscConfig+0x330>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4ba5      	ldr	r3, [pc, #660]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	49a7      	ldr	r1, [pc, #668]	; (8001e40 <HAL_RCC_OscConfig+0x334>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e01e      	b.n	8001be8 <HAL_RCC_OscConfig+0xdc>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xc4>
 8001bb2:	4ba1      	ldr	r3, [pc, #644]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4ba0      	ldr	r3, [pc, #640]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	02c9      	lsls	r1, r1, #11
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	4b9d      	ldr	r3, [pc, #628]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b9c      	ldr	r3, [pc, #624]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xdc>
 8001bd0:	4b99      	ldr	r3, [pc, #612]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	4999      	ldr	r1, [pc, #612]	; (8001e3c <HAL_RCC_OscConfig+0x330>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4b96      	ldr	r3, [pc, #600]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b95      	ldr	r3, [pc, #596]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	4997      	ldr	r1, [pc, #604]	; (8001e40 <HAL_RCC_OscConfig+0x334>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d014      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcd6 	bl	80015a0 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fcd1 	bl	80015a0 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e28a      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0c:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0xee>
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fcc1 	bl	80015a0 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fcbc 	bl	80015a0 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e275      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x118>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x146>
 8001c50:	e069      	b.n	8001d26 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c52:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	220c      	movs	r2, #12
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d00b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c5c:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	220c      	movs	r2, #12
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d11c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x196>
 8001c68:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	025b      	lsls	r3, r3, #9
 8001c70:	4013      	ands	r3, r2
 8001c72:	d116      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e24b      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	22f8      	movs	r2, #248	; 0xf8
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00da      	lsls	r2, r3, #3
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca0:	e041      	b.n	8001d26 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fc73 	bl	80015a0 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc6e 	bl	80015a0 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e227      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f1      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	22f8      	movs	r2, #248	; 0xf8
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00da      	lsls	r2, r3, #3
 8001cec:	4b52      	ldr	r3, [pc, #328]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e018      	b.n	8001d26 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b4f      	ldr	r3, [pc, #316]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc4e 	bl	80015a0 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc49 	bl	80015a0 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e202      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2202      	movs	r2, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f1      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d036      	beq.n	8001d9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d019      	beq.n	8001d6c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fc2c 	bl	80015a0 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fc27 	bl	80015a0 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1e0      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2202      	movs	r2, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f1      	beq.n	8001d4e <HAL_RCC_OscConfig+0x242>
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	438a      	bics	r2, r1
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff fc12 	bl	80015a0 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fc0d 	bl	80015a0 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1c6      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f1      	bne.n	8001d82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d100      	bne.n	8001daa <HAL_RCC_OscConfig+0x29e>
 8001da8:	e0b4      	b.n	8001f14 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	201f      	movs	r0, #31
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	055b      	lsls	r3, r3, #21
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d110      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0549      	lsls	r1, r1, #21
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	61da      	str	r2, [r3, #28]
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	055b      	lsls	r3, r3, #21
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dda:	183b      	adds	r3, r7, r0
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_RCC_OscConfig+0x338>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d11a      	bne.n	8001e22 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_OscConfig+0x338>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_OscConfig+0x338>)
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	0049      	lsls	r1, r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fbd1 	bl	80015a0 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7ff fbcc 	bl	80015a0 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e185      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x338>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_RCC_OscConfig+0x33c>
 8001e2a:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	621a      	str	r2, [r3, #32]
 8001e36:	e035      	b.n	8001ea4 <HAL_RCC_OscConfig+0x398>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	fffeffff 	.word	0xfffeffff
 8001e40:	fffbffff 	.word	0xfffbffff
 8001e44:	40007000 	.word	0x40007000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x35e>
 8001e50:	4bb6      	ldr	r3, [pc, #728]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	4bb5      	ldr	r3, [pc, #724]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	438a      	bics	r2, r1
 8001e5a:	621a      	str	r2, [r3, #32]
 8001e5c:	4bb3      	ldr	r3, [pc, #716]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	4bb2      	ldr	r3, [pc, #712]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	438a      	bics	r2, r1
 8001e66:	621a      	str	r2, [r3, #32]
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x398>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x380>
 8001e72:	4bae      	ldr	r3, [pc, #696]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	4bad      	ldr	r3, [pc, #692]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e78:	2104      	movs	r1, #4
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	621a      	str	r2, [r3, #32]
 8001e7e:	4bab      	ldr	r3, [pc, #684]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	4baa      	ldr	r3, [pc, #680]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	621a      	str	r2, [r3, #32]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x398>
 8001e8c:	4ba7      	ldr	r3, [pc, #668]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	4ba6      	ldr	r3, [pc, #664]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	621a      	str	r2, [r3, #32]
 8001e98:	4ba4      	ldr	r3, [pc, #656]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	4ba3      	ldr	r3, [pc, #652]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d014      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff fb78 	bl	80015a0 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e009      	b.n	8001eca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb73 	bl	80015a0 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a9b      	ldr	r2, [pc, #620]	; (8002130 <HAL_RCC_OscConfig+0x624>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e12b      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	4b98      	ldr	r3, [pc, #608]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
 8001ed4:	e013      	b.n	8001efe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb63 	bl	80015a0 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fb5e 	bl	80015a0 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	4a91      	ldr	r2, [pc, #580]	; (8002130 <HAL_RCC_OscConfig+0x624>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e116      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b8d      	ldr	r3, [pc, #564]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efe:	231f      	movs	r3, #31
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f0e:	4989      	ldr	r1, [pc, #548]	; (8002134 <HAL_RCC_OscConfig+0x628>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f26:	4b81      	ldr	r3, [pc, #516]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2a:	4b80      	ldr	r3, [pc, #512]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f32:	4b7e      	ldr	r3, [pc, #504]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	4b7d      	ldr	r3, [pc, #500]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb2f 	bl	80015a0 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f48:	f7ff fb2a 	bl	80015a0 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0e3      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f5a:	4b74      	ldr	r3, [pc, #464]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f64:	4b71      	ldr	r3, [pc, #452]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	22f8      	movs	r2, #248	; 0xf8
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	00da      	lsls	r2, r3, #3
 8001f74:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	e034      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	3305      	adds	r3, #5
 8001f82:	d111      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	22f8      	movs	r2, #248	; 0xf8
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	00da      	lsls	r2, r3, #3
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa6:	e01e      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fa8:	4b60      	ldr	r3, [pc, #384]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fac:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001fae:	2104      	movs	r1, #4
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb8:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff faee 	bl	80015a0 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fca:	f7ff fae9 	bl	80015a0 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0a2      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d1f1      	bne.n	8001fca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d100      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4e4>
 8001fee:	e097      	b.n	8002120 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	220c      	movs	r2, #12
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d100      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4f2>
 8001ffc:	e06b      	b.n	80020d6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d14c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b48      	ldr	r3, [pc, #288]	; (800212c <HAL_RCC_OscConfig+0x620>)
 800200c:	494a      	ldr	r1, [pc, #296]	; (8002138 <HAL_RCC_OscConfig+0x62c>)
 800200e:	400a      	ands	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fac5 	bl	80015a0 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fac0 	bl	80015a0 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e079      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	049b      	lsls	r3, r3, #18
 8002036:	4013      	ands	r3, r2
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_OscConfig+0x620>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	220f      	movs	r2, #15
 8002040:	4393      	bics	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <HAL_RCC_OscConfig+0x620>)
 800204a:	430a      	orrs	r2, r1
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_RCC_OscConfig+0x630>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	431a      	orrs	r2, r3
 8002062:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x620>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <HAL_RCC_OscConfig+0x620>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0449      	lsls	r1, r1, #17
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fa93 	bl	80015a0 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff fa8e 	bl	80015a0 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e047      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x620>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x574>
 800209e:	e03f      	b.n	8002120 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_OscConfig+0x620>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x620>)
 80020a6:	4924      	ldr	r1, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x62c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa78 	bl	80015a0 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fa73 	bl	80015a0 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e02c      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_OscConfig+0x620>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	4013      	ands	r3, r2
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5aa>
 80020d4:	e024      	b.n	8002120 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e01f      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_OscConfig+0x620>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_OscConfig+0x620>)
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	220f      	movs	r2, #15
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	23f0      	movs	r3, #240	; 0xf0
 8002110:	039b      	lsls	r3, r3, #14
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b008      	add	sp, #32
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40021000 	.word	0x40021000
 8002130:	00001388 	.word	0x00001388
 8002134:	efffffff 	.word	0xefffffff
 8002138:	feffffff 	.word	0xfeffffff
 800213c:	ffc2ffff 	.word	0xffc2ffff

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b3      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d911      	bls.n	8002186 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e09a      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d015      	beq.n	80021bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d006      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021a0:	21e0      	movs	r1, #224	; 0xe0
 80021a2:	00c9      	lsls	r1, r1, #3
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	22f0      	movs	r2, #240	; 0xf0
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	4013      	ands	r3, r2
 80021d8:	d114      	bne.n	8002204 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06e      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	049b      	lsls	r3, r3, #18
 80021ee:	4013      	ands	r3, r2
 80021f0:	d108      	bne.n	8002204 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e062      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e05b      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	4393      	bics	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002218:	f7ff f9c2 	bl	80015a0 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002220:	e009      	b.n	8002236 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7ff f9bd 	bl	80015a0 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_RCC_ClockConfig+0x18c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e042      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	220c      	movs	r2, #12
 800223c:	401a      	ands	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1ec      	bne.n	8002222 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d211      	bcs.n	800227a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	4393      	bics	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_RCC_ClockConfig+0x184>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e020      	b.n	80022bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_RCC_ClockConfig+0x190>)
 800228a:	4013      	ands	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002298:	f000 f820 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229c:	0001      	movs	r1, r0
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x188>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	220f      	movs	r2, #15
 80022a6:	4013      	ands	r3, r2
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x194>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	000a      	movs	r2, r1
 80022ae:	40da      	lsrs	r2, r3
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x198>)
 80022b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff f92d 	bl	8001514 <HAL_InitTick>
  
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b004      	add	sp, #16
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	00001388 	.word	0x00001388
 80022d0:	fffff8ff 	.word	0xfffff8ff
 80022d4:	08003ea0 	.word	0x08003ea0
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	220c      	movs	r2, #12
 8002300:	4013      	ands	r3, r2
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x30>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x36>
 800230a:	e02c      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_GetSysClockFreq+0xa0>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e02c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	220f      	movs	r2, #15
 8002318:	4013      	ands	r3, r2
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_RCC_GetSysClockFreq+0xa4>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	220f      	movs	r2, #15
 8002326:	4013      	ands	r3, r2
 8002328:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_RCC_GetSysClockFreq+0xa8>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	4013      	ands	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4810      	ldr	r0, [pc, #64]	; (800237c <HAL_RCC_GetSysClockFreq+0xa0>)
 800233c:	f7fd feee 	bl	800011c <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	001a      	movs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4353      	muls	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	000a      	movs	r2, r1
 8002350:	0152      	lsls	r2, r2, #5
 8002352:	1a52      	subs	r2, r2, r1
 8002354:	0193      	lsls	r3, r2, #6
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	185b      	adds	r3, r3, r1
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e002      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002368:	613b      	str	r3, [r7, #16]
      break;
 800236a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800236c:	693b      	ldr	r3, [r7, #16]
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b006      	add	sp, #24
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40021000 	.word	0x40021000
 800237c:	007a1200 	.word	0x007a1200
 8002380:	08003eb8 	.word	0x08003eb8
 8002384:	08003ec8 	.word	0x08003ec8

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <HAL_RCC_GetHCLKFreq+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023a0:	f7ff fff2 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a4:	0001      	movs	r1, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	2207      	movs	r2, #7
 80023ae:	4013      	ands	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	000b      	movs	r3, r1
}    
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08003eb0 	.word	0x08003eb0

080023c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e044      	b.n	8002464 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2278      	movs	r2, #120	; 0x78
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fe ff13 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2224      	movs	r2, #36	; 0x24
 80023f6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f830 	bl	8002470 <UART_SetConfig>
 8002410:	0003      	movs	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e024      	b.n	8002464 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f963 	bl	80026f0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	490d      	ldr	r1, [pc, #52]	; (800246c <HAL_UART_Init+0xa4>)
 8002436:	400a      	ands	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2108      	movs	r1, #8
 8002446:	438a      	bics	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f9fb 	bl	8002858 <UART_CheckIdleState>
 8002462:	0003      	movs	r3, r0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}
 800246c:	fffff7ff 	.word	0xfffff7ff

08002470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002478:	231e      	movs	r3, #30
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a8d      	ldr	r2, [pc, #564]	; (80026d4 <UART_SetConfig+0x264>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a88      	ldr	r2, [pc, #544]	; (80026d8 <UART_SetConfig+0x268>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a7f      	ldr	r2, [pc, #508]	; (80026dc <UART_SetConfig+0x26c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7b      	ldr	r2, [pc, #492]	; (80026e0 <UART_SetConfig+0x270>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d127      	bne.n	8002546 <UART_SetConfig+0xd6>
 80024f6:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <UART_SetConfig+0x274>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d00d      	beq.n	800251e <UART_SetConfig+0xae>
 8002502:	d81b      	bhi.n	800253c <UART_SetConfig+0xcc>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d014      	beq.n	8002532 <UART_SetConfig+0xc2>
 8002508:	d818      	bhi.n	800253c <UART_SetConfig+0xcc>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <UART_SetConfig+0xa4>
 800250e:	2b01      	cmp	r3, #1
 8002510:	d00a      	beq.n	8002528 <UART_SetConfig+0xb8>
 8002512:	e013      	b.n	800253c <UART_SetConfig+0xcc>
 8002514:	231f      	movs	r3, #31
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e021      	b.n	8002562 <UART_SetConfig+0xf2>
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e01c      	b.n	8002562 <UART_SetConfig+0xf2>
 8002528:	231f      	movs	r3, #31
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2204      	movs	r2, #4
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e017      	b.n	8002562 <UART_SetConfig+0xf2>
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2208      	movs	r2, #8
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e012      	b.n	8002562 <UART_SetConfig+0xf2>
 800253c:	231f      	movs	r3, #31
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2210      	movs	r2, #16
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e00d      	b.n	8002562 <UART_SetConfig+0xf2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <UART_SetConfig+0x278>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d104      	bne.n	800255a <UART_SetConfig+0xea>
 8002550:	231f      	movs	r3, #31
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e003      	b.n	8002562 <UART_SetConfig+0xf2>
 800255a:	231f      	movs	r3, #31
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2210      	movs	r2, #16
 8002560:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	429a      	cmp	r2, r3
 800256c:	d15c      	bne.n	8002628 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800256e:	231f      	movs	r3, #31
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d015      	beq.n	80025a4 <UART_SetConfig+0x134>
 8002578:	dc18      	bgt.n	80025ac <UART_SetConfig+0x13c>
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00d      	beq.n	800259a <UART_SetConfig+0x12a>
 800257e:	dc15      	bgt.n	80025ac <UART_SetConfig+0x13c>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <UART_SetConfig+0x11a>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d005      	beq.n	8002594 <UART_SetConfig+0x124>
 8002588:	e010      	b.n	80025ac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258a:	f7ff ff07 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]
        break;
 8002592:	e012      	b.n	80025ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <UART_SetConfig+0x27c>)
 8002596:	61bb      	str	r3, [r7, #24]
        break;
 8002598:	e00f      	b.n	80025ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259a:	f7ff fe9f 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800259e:	0003      	movs	r3, r0
 80025a0:	61bb      	str	r3, [r7, #24]
        break;
 80025a2:	e00a      	b.n	80025ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	61bb      	str	r3, [r7, #24]
        break;
 80025aa:	e006      	b.n	80025ba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025b0:	231e      	movs	r3, #30
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
        break;
 80025b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d100      	bne.n	80025c2 <UART_SetConfig+0x152>
 80025c0:	e07a      	b.n	80026b8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	18d2      	adds	r2, r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0019      	movs	r1, r3
 80025d4:	0010      	movs	r0, r2
 80025d6:	f7fd fda1 	bl	800011c <__udivsi3>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d91c      	bls.n	800261e <UART_SetConfig+0x1ae>
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d217      	bcs.n	800261e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	200e      	movs	r0, #14
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	210f      	movs	r1, #15
 80025f8:	438a      	bics	r2, r1
 80025fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	b29b      	uxth	r3, r3
 8002602:	2207      	movs	r2, #7
 8002604:	4013      	ands	r3, r2
 8002606:	b299      	uxth	r1, r3
 8002608:	183b      	adds	r3, r7, r0
 800260a:	183a      	adds	r2, r7, r0
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	183a      	adds	r2, r7, r0
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e04c      	b.n	80026b8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800261e:	231e      	movs	r3, #30
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e047      	b.n	80026b8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d015      	beq.n	800265e <UART_SetConfig+0x1ee>
 8002632:	dc18      	bgt.n	8002666 <UART_SetConfig+0x1f6>
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00d      	beq.n	8002654 <UART_SetConfig+0x1e4>
 8002638:	dc15      	bgt.n	8002666 <UART_SetConfig+0x1f6>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <UART_SetConfig+0x1d4>
 800263e:	2b02      	cmp	r3, #2
 8002640:	d005      	beq.n	800264e <UART_SetConfig+0x1de>
 8002642:	e010      	b.n	8002666 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff feaa 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
        break;
 800264c:	e012      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <UART_SetConfig+0x27c>)
 8002650:	61bb      	str	r3, [r7, #24]
        break;
 8002652:	e00f      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002654:	f7ff fe42 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002658:	0003      	movs	r3, r0
 800265a:	61bb      	str	r3, [r7, #24]
        break;
 800265c:	e00a      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	61bb      	str	r3, [r7, #24]
        break;
 8002664:	e006      	b.n	8002674 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800266a:	231e      	movs	r3, #30
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
        break;
 8002672:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01e      	beq.n	80026b8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	085a      	lsrs	r2, r3, #1
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	18d2      	adds	r2, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0019      	movs	r1, r3
 800268a:	0010      	movs	r0, r2
 800268c:	f7fd fd46 	bl	800011c <__udivsi3>
 8002690:	0003      	movs	r3, r0
 8002692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	d90a      	bls.n	80026b0 <UART_SetConfig+0x240>
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	025b      	lsls	r3, r3, #9
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d205      	bcs.n	80026b0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e003      	b.n	80026b8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80026b0:	231e      	movs	r3, #30
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80026c4:	231e      	movs	r3, #30
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b008      	add	sp, #32
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	ffff69f3 	.word	0xffff69f3
 80026d8:	ffffcfff 	.word	0xffffcfff
 80026dc:	fffff4ff 	.word	0xfffff4ff
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40004400 	.word	0x40004400
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	d00b      	beq.n	800271a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <UART_AdvFeatureConfig+0x144>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d00b      	beq.n	800273c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a43      	ldr	r2, [pc, #268]	; (8002838 <UART_AdvFeatureConfig+0x148>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d00b      	beq.n	800275e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <UART_AdvFeatureConfig+0x14c>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2208      	movs	r2, #8
 8002764:	4013      	ands	r3, r2
 8002766:	d00b      	beq.n	8002780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <UART_AdvFeatureConfig+0x150>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d00b      	beq.n	80027a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <UART_AdvFeatureConfig+0x154>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	2220      	movs	r2, #32
 80027a8:	4013      	ands	r3, r2
 80027aa:	d00b      	beq.n	80027c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <UART_AdvFeatureConfig+0x158>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	4013      	ands	r3, r2
 80027cc:	d01d      	beq.n	800280a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <UART_AdvFeatureConfig+0x15c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	035b      	lsls	r3, r3, #13
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d10b      	bne.n	800280a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a15      	ldr	r2, [pc, #84]	; (8002850 <UART_AdvFeatureConfig+0x160>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	4013      	ands	r3, r2
 8002812:	d00b      	beq.n	800282c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <UART_AdvFeatureConfig+0x164>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
  }
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	fffdffff 	.word	0xfffdffff
 8002838:	fffeffff 	.word	0xfffeffff
 800283c:	fffbffff 	.word	0xfffbffff
 8002840:	ffff7fff 	.word	0xffff7fff
 8002844:	ffffefff 	.word	0xffffefff
 8002848:	ffffdfff 	.word	0xffffdfff
 800284c:	ffefffff 	.word	0xffefffff
 8002850:	ff9fffff 	.word	0xff9fffff
 8002854:	fff7ffff 	.word	0xfff7ffff

08002858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b092      	sub	sp, #72	; 0x48
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2284      	movs	r2, #132	; 0x84
 8002864:	2100      	movs	r1, #0
 8002866:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002868:	f7fe fe9a 	bl	80015a0 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2208      	movs	r2, #8
 8002878:	4013      	ands	r3, r2
 800287a:	2b08      	cmp	r3, #8
 800287c:	d12c      	bne.n	80028d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800287e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	0391      	lsls	r1, r2, #14
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <UART_CheckIdleState+0x148>)
 8002888:	9200      	str	r2, [sp, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	f000 f88c 	bl	80029a8 <UART_WaitOnFlagUntilTimeout>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d021      	beq.n	80028d8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002894:	f3ef 8310 	mrs	r3, PRIMASK
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
 800289e:	2301      	movs	r3, #1
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	f383 8810 	msr	PRIMASK, r3
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	f383 8810 	msr	PRIMASK, r3
}
 80028c4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2278      	movs	r2, #120	; 0x78
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e05f      	b.n	8002998 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d146      	bne.n	8002974 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	03d1      	lsls	r1, r2, #15
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4a2c      	ldr	r2, [pc, #176]	; (80029a0 <UART_CheckIdleState+0x148>)
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f000 f858 	bl	80029a8 <UART_WaitOnFlagUntilTimeout>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d03b      	beq.n	8002974 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	60fb      	str	r3, [r7, #12]
  return(result);
 8002902:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
 8002906:	2301      	movs	r3, #1
 8002908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4921      	ldr	r1, [pc, #132]	; (80029a4 <UART_CheckIdleState+0x14c>)
 800291e:	400a      	ands	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292e:	f3ef 8310 	mrs	r3, PRIMASK
 8002932:	61bb      	str	r3, [r7, #24]
  return(result);
 8002934:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	2120      	movs	r1, #32
 8002966:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2278      	movs	r2, #120	; 0x78
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e011      	b.n	8002998 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	2120      	movs	r1, #32
 8002980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2278      	movs	r2, #120	; 0x78
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b010      	add	sp, #64	; 0x40
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	01ffffff 	.word	0x01ffffff
 80029a4:	fffffedf 	.word	0xfffffedf

080029a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b8:	e04b      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	3301      	adds	r3, #1
 80029be:	d048      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c0:	f7fe fdee 	bl	80015a0 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d302      	bcc.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04b      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2204      	movs	r2, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	d035      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d111      	bne.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f83c 	bl	8002a7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2284      	movs	r2, #132	; 0x84
 8002a08:	2108      	movs	r1, #8
 8002a0a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2278      	movs	r2, #120	; 0x78
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e02c      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	401a      	ands	r2, r3
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d112      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f81f 	bl	8002a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2284      	movs	r2, #132	; 0x84
 8002a42:	2120      	movs	r1, #32
 8002a44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2278      	movs	r2, #120	; 0x78
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e00f      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	425a      	negs	r2, r3
 8002a62:	4153      	adcs	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0a4      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	617b      	str	r3, [r7, #20]
  return(result);
 8002a8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4926      	ldr	r1, [pc, #152]	; (8002b40 <UART_EndRxTransfer+0xc4>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	623b      	str	r3, [r7, #32]
  return(result);
 8002abc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d118      	bne.n	8002b22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af0:	f3ef 8310 	mrs	r3, PRIMASK
 8002af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002af6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	2301      	movs	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2110      	movs	r1, #16
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	2120      	movs	r1, #32
 8002b28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b00e      	add	sp, #56	; 0x38
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	fffffedf 	.word	0xfffffedf

08002b44 <__itoa>:
 8002b44:	1e93      	subs	r3, r2, #2
 8002b46:	b510      	push	{r4, lr}
 8002b48:	000c      	movs	r4, r1
 8002b4a:	2b22      	cmp	r3, #34	; 0x22
 8002b4c:	d904      	bls.n	8002b58 <__itoa+0x14>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	001c      	movs	r4, r3
 8002b52:	700b      	strb	r3, [r1, #0]
 8002b54:	0020      	movs	r0, r4
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	2a0a      	cmp	r2, #10
 8002b5a:	d109      	bne.n	8002b70 <__itoa+0x2c>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	da07      	bge.n	8002b70 <__itoa+0x2c>
 8002b60:	232d      	movs	r3, #45	; 0x2d
 8002b62:	700b      	strb	r3, [r1, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	4240      	negs	r0, r0
 8002b68:	1861      	adds	r1, r4, r1
 8002b6a:	f000 f845 	bl	8002bf8 <__utoa>
 8002b6e:	e7f1      	b.n	8002b54 <__itoa+0x10>
 8002b70:	2100      	movs	r1, #0
 8002b72:	e7f9      	b.n	8002b68 <__itoa+0x24>

08002b74 <itoa>:
 8002b74:	b510      	push	{r4, lr}
 8002b76:	f7ff ffe5 	bl	8002b44 <__itoa>
 8002b7a:	bd10      	pop	{r4, pc}

08002b7c <rand>:
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <rand+0x5c>)
 8002b7e:	b510      	push	{r4, lr}
 8002b80:	681c      	ldr	r4, [r3, #0]
 8002b82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <rand+0x3a>
 8002b88:	2018      	movs	r0, #24
 8002b8a:	f000 fa6d 	bl	8003068 <malloc>
 8002b8e:	1e02      	subs	r2, r0, #0
 8002b90:	6320      	str	r0, [r4, #48]	; 0x30
 8002b92:	d104      	bne.n	8002b9e <rand+0x22>
 8002b94:	2152      	movs	r1, #82	; 0x52
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <rand+0x60>)
 8002b98:	4811      	ldr	r0, [pc, #68]	; (8002be0 <rand+0x64>)
 8002b9a:	f000 f9fd 	bl	8002f98 <__assert_func>
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <rand+0x68>)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	6003      	str	r3, [r0, #0]
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <rand+0x6c>)
 8002ba6:	6043      	str	r3, [r0, #4]
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <rand+0x70>)
 8002baa:	6083      	str	r3, [r0, #8]
 8002bac:	230b      	movs	r3, #11
 8002bae:	8183      	strh	r3, [r0, #12]
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	6110      	str	r0, [r2, #16]
 8002bb4:	6151      	str	r1, [r2, #20]
 8002bb6:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <rand+0x74>)
 8002bba:	6920      	ldr	r0, [r4, #16]
 8002bbc:	6961      	ldr	r1, [r4, #20]
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <rand+0x78>)
 8002bc0:	f7fd fc22 	bl	8000408 <__aeabi_lmul>
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	1880      	adds	r0, r0, r2
 8002bca:	4159      	adcs	r1, r3
 8002bcc:	6120      	str	r0, [r4, #16]
 8002bce:	6161      	str	r1, [r4, #20]
 8002bd0:	0048      	lsls	r0, r1, #1
 8002bd2:	0840      	lsrs	r0, r0, #1
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	20000068 	.word	0x20000068
 8002bdc:	08003ed8 	.word	0x08003ed8
 8002be0:	08003eef 	.word	0x08003eef
 8002be4:	abcd330e 	.word	0xabcd330e
 8002be8:	e66d1234 	.word	0xe66d1234
 8002bec:	0005deec 	.word	0x0005deec
 8002bf0:	4c957f2d 	.word	0x4c957f2d
 8002bf4:	5851f42d 	.word	0x5851f42d

08002bf8 <__utoa>:
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	000c      	movs	r4, r1
 8002bfc:	0016      	movs	r6, r2
 8002bfe:	b08d      	sub	sp, #52	; 0x34
 8002c00:	2225      	movs	r2, #37	; 0x25
 8002c02:	0007      	movs	r7, r0
 8002c04:	4915      	ldr	r1, [pc, #84]	; (8002c5c <__utoa+0x64>)
 8002c06:	a802      	add	r0, sp, #8
 8002c08:	f000 f9bd 	bl	8002f86 <memcpy>
 8002c0c:	1e62      	subs	r2, r4, #1
 8002c0e:	1eb3      	subs	r3, r6, #2
 8002c10:	2500      	movs	r5, #0
 8002c12:	9201      	str	r2, [sp, #4]
 8002c14:	2b22      	cmp	r3, #34	; 0x22
 8002c16:	d904      	bls.n	8002c22 <__utoa+0x2a>
 8002c18:	7025      	strb	r5, [r4, #0]
 8002c1a:	002c      	movs	r4, r5
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	b00d      	add	sp, #52	; 0x34
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c22:	0038      	movs	r0, r7
 8002c24:	0031      	movs	r1, r6
 8002c26:	f7fd faff 	bl	8000228 <__aeabi_uidivmod>
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	aa02      	add	r2, sp, #8
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	9a01      	ldr	r2, [sp, #4]
 8002c32:	0029      	movs	r1, r5
 8002c34:	3501      	adds	r5, #1
 8002c36:	5553      	strb	r3, [r2, r5]
 8002c38:	003b      	movs	r3, r7
 8002c3a:	0007      	movs	r7, r0
 8002c3c:	429e      	cmp	r6, r3
 8002c3e:	d9f0      	bls.n	8002c22 <__utoa+0x2a>
 8002c40:	2300      	movs	r3, #0
 8002c42:	0022      	movs	r2, r4
 8002c44:	5563      	strb	r3, [r4, r5]
 8002c46:	000b      	movs	r3, r1
 8002c48:	1ac8      	subs	r0, r1, r3
 8002c4a:	4283      	cmp	r3, r0
 8002c4c:	dde6      	ble.n	8002c1c <__utoa+0x24>
 8002c4e:	7810      	ldrb	r0, [r2, #0]
 8002c50:	5ce5      	ldrb	r5, [r4, r3]
 8002c52:	7015      	strb	r5, [r2, #0]
 8002c54:	54e0      	strb	r0, [r4, r3]
 8002c56:	3201      	adds	r2, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	e7f5      	b.n	8002c48 <__utoa+0x50>
 8002c5c:	08003f47 	.word	0x08003f47

08002c60 <std>:
 8002c60:	2300      	movs	r3, #0
 8002c62:	b510      	push	{r4, lr}
 8002c64:	0004      	movs	r4, r0
 8002c66:	6003      	str	r3, [r0, #0]
 8002c68:	6043      	str	r3, [r0, #4]
 8002c6a:	6083      	str	r3, [r0, #8]
 8002c6c:	8181      	strh	r1, [r0, #12]
 8002c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002c70:	81c2      	strh	r2, [r0, #14]
 8002c72:	6103      	str	r3, [r0, #16]
 8002c74:	6143      	str	r3, [r0, #20]
 8002c76:	6183      	str	r3, [r0, #24]
 8002c78:	0019      	movs	r1, r3
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	305c      	adds	r0, #92	; 0x5c
 8002c7e:	f000 f8ff 	bl	8002e80 <memset>
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <std+0x50>)
 8002c84:	6224      	str	r4, [r4, #32]
 8002c86:	6263      	str	r3, [r4, #36]	; 0x24
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <std+0x54>)
 8002c8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <std+0x58>)
 8002c8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <std+0x5c>)
 8002c92:	6323      	str	r3, [r4, #48]	; 0x30
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <std+0x60>)
 8002c96:	429c      	cmp	r4, r3
 8002c98:	d005      	beq.n	8002ca6 <std+0x46>
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <std+0x64>)
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	d002      	beq.n	8002ca6 <std+0x46>
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <std+0x68>)
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d103      	bne.n	8002cae <std+0x4e>
 8002ca6:	0020      	movs	r0, r4
 8002ca8:	3058      	adds	r0, #88	; 0x58
 8002caa:	f000 f969 	bl	8002f80 <__retarget_lock_init_recursive>
 8002cae:	bd10      	pop	{r4, pc}
 8002cb0:	08002de9 	.word	0x08002de9
 8002cb4:	08002e11 	.word	0x08002e11
 8002cb8:	08002e49 	.word	0x08002e49
 8002cbc:	08002e75 	.word	0x08002e75
 8002cc0:	200006c8 	.word	0x200006c8
 8002cc4:	20000730 	.word	0x20000730
 8002cc8:	20000798 	.word	0x20000798

08002ccc <stdio_exit_handler>:
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <stdio_exit_handler+0x10>)
 8002cd0:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <stdio_exit_handler+0x14>)
 8002cd2:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <stdio_exit_handler+0x18>)
 8002cd4:	f000 f86c 	bl	8002db0 <_fwalk_sglue>
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000010 	.word	0x20000010
 8002ce0:	080032f9 	.word	0x080032f9
 8002ce4:	2000001c 	.word	0x2000001c

08002ce8 <cleanup_stdio>:
 8002ce8:	6841      	ldr	r1, [r0, #4]
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <cleanup_stdio+0x30>)
 8002cec:	b510      	push	{r4, lr}
 8002cee:	0004      	movs	r4, r0
 8002cf0:	4299      	cmp	r1, r3
 8002cf2:	d001      	beq.n	8002cf8 <cleanup_stdio+0x10>
 8002cf4:	f000 fb00 	bl	80032f8 <_fflush_r>
 8002cf8:	68a1      	ldr	r1, [r4, #8]
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <cleanup_stdio+0x34>)
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	d002      	beq.n	8002d06 <cleanup_stdio+0x1e>
 8002d00:	0020      	movs	r0, r4
 8002d02:	f000 faf9 	bl	80032f8 <_fflush_r>
 8002d06:	68e1      	ldr	r1, [r4, #12]
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <cleanup_stdio+0x38>)
 8002d0a:	4299      	cmp	r1, r3
 8002d0c:	d002      	beq.n	8002d14 <cleanup_stdio+0x2c>
 8002d0e:	0020      	movs	r0, r4
 8002d10:	f000 faf2 	bl	80032f8 <_fflush_r>
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	200006c8 	.word	0x200006c8
 8002d1c:	20000730 	.word	0x20000730
 8002d20:	20000798 	.word	0x20000798

08002d24 <global_stdio_init.part.0>:
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <global_stdio_init.part.0+0x28>)
 8002d28:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <global_stdio_init.part.0+0x2c>)
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <global_stdio_init.part.0+0x30>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	f7ff ff95 	bl	8002c60 <std>
 8002d36:	2201      	movs	r2, #1
 8002d38:	2109      	movs	r1, #9
 8002d3a:	4807      	ldr	r0, [pc, #28]	; (8002d58 <global_stdio_init.part.0+0x34>)
 8002d3c:	f7ff ff90 	bl	8002c60 <std>
 8002d40:	2202      	movs	r2, #2
 8002d42:	2112      	movs	r1, #18
 8002d44:	4805      	ldr	r0, [pc, #20]	; (8002d5c <global_stdio_init.part.0+0x38>)
 8002d46:	f7ff ff8b 	bl	8002c60 <std>
 8002d4a:	bd10      	pop	{r4, pc}
 8002d4c:	20000800 	.word	0x20000800
 8002d50:	08002ccd 	.word	0x08002ccd
 8002d54:	200006c8 	.word	0x200006c8
 8002d58:	20000730 	.word	0x20000730
 8002d5c:	20000798 	.word	0x20000798

08002d60 <__sfp_lock_acquire>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4802      	ldr	r0, [pc, #8]	; (8002d6c <__sfp_lock_acquire+0xc>)
 8002d64:	f000 f90d 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000809 	.word	0x20000809

08002d70 <__sfp_lock_release>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <__sfp_lock_release+0xc>)
 8002d74:	f000 f906 	bl	8002f84 <__retarget_lock_release_recursive>
 8002d78:	bd10      	pop	{r4, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	20000809 	.word	0x20000809

08002d80 <__sinit>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	0004      	movs	r4, r0
 8002d84:	f7ff ffec 	bl	8002d60 <__sfp_lock_acquire>
 8002d88:	6a23      	ldr	r3, [r4, #32]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <__sinit+0x14>
 8002d8e:	f7ff ffef 	bl	8002d70 <__sfp_lock_release>
 8002d92:	bd10      	pop	{r4, pc}
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__sinit+0x28>)
 8002d96:	6223      	str	r3, [r4, #32]
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__sinit+0x2c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f6      	bne.n	8002d8e <__sinit+0xe>
 8002da0:	f7ff ffc0 	bl	8002d24 <global_stdio_init.part.0>
 8002da4:	e7f3      	b.n	8002d8e <__sinit+0xe>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	08002ce9 	.word	0x08002ce9
 8002dac:	20000800 	.word	0x20000800

08002db0 <_fwalk_sglue>:
 8002db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002db2:	0014      	movs	r4, r2
 8002db4:	2600      	movs	r6, #0
 8002db6:	9000      	str	r0, [sp, #0]
 8002db8:	9101      	str	r1, [sp, #4]
 8002dba:	68a5      	ldr	r5, [r4, #8]
 8002dbc:	6867      	ldr	r7, [r4, #4]
 8002dbe:	3f01      	subs	r7, #1
 8002dc0:	d504      	bpl.n	8002dcc <_fwalk_sglue+0x1c>
 8002dc2:	6824      	ldr	r4, [r4, #0]
 8002dc4:	2c00      	cmp	r4, #0
 8002dc6:	d1f8      	bne.n	8002dba <_fwalk_sglue+0xa>
 8002dc8:	0030      	movs	r0, r6
 8002dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dcc:	89ab      	ldrh	r3, [r5, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d908      	bls.n	8002de4 <_fwalk_sglue+0x34>
 8002dd2:	220e      	movs	r2, #14
 8002dd4:	5eab      	ldrsh	r3, [r5, r2]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	d004      	beq.n	8002de4 <_fwalk_sglue+0x34>
 8002dda:	0029      	movs	r1, r5
 8002ddc:	9800      	ldr	r0, [sp, #0]
 8002dde:	9b01      	ldr	r3, [sp, #4]
 8002de0:	4798      	blx	r3
 8002de2:	4306      	orrs	r6, r0
 8002de4:	3568      	adds	r5, #104	; 0x68
 8002de6:	e7ea      	b.n	8002dbe <_fwalk_sglue+0xe>

08002de8 <__sread>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	000c      	movs	r4, r1
 8002dec:	250e      	movs	r5, #14
 8002dee:	5f49      	ldrsh	r1, [r1, r5]
 8002df0:	f000 f874 	bl	8002edc <_read_r>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	db03      	blt.n	8002e00 <__sread+0x18>
 8002df8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dfa:	181b      	adds	r3, r3, r0
 8002dfc:	6563      	str	r3, [r4, #84]	; 0x54
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <__sread+0x24>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	e7f9      	b.n	8002dfe <__sread+0x16>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	ffffefff 	.word	0xffffefff

08002e10 <__swrite>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	001f      	movs	r7, r3
 8002e14:	898b      	ldrh	r3, [r1, #12]
 8002e16:	0005      	movs	r5, r0
 8002e18:	000c      	movs	r4, r1
 8002e1a:	0016      	movs	r6, r2
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	d505      	bpl.n	8002e2c <__swrite+0x1c>
 8002e20:	230e      	movs	r3, #14
 8002e22:	5ec9      	ldrsh	r1, [r1, r3]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2302      	movs	r3, #2
 8002e28:	f000 f844 	bl	8002eb4 <_lseek_r>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <__swrite+0x34>)
 8002e30:	0028      	movs	r0, r5
 8002e32:	4013      	ands	r3, r2
 8002e34:	81a3      	strh	r3, [r4, #12]
 8002e36:	0032      	movs	r2, r6
 8002e38:	230e      	movs	r3, #14
 8002e3a:	5ee1      	ldrsh	r1, [r4, r3]
 8002e3c:	003b      	movs	r3, r7
 8002e3e:	f000 f861 	bl	8002f04 <_write_r>
 8002e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e44:	ffffefff 	.word	0xffffefff

08002e48 <__sseek>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	000c      	movs	r4, r1
 8002e4c:	250e      	movs	r5, #14
 8002e4e:	5f49      	ldrsh	r1, [r1, r5]
 8002e50:	f000 f830 	bl	8002eb4 <_lseek_r>
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	1c42      	adds	r2, r0, #1
 8002e58:	d103      	bne.n	8002e62 <__sseek+0x1a>
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <__sseek+0x28>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	0152      	lsls	r2, r2, #5
 8002e66:	4313      	orrs	r3, r2
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8002e6c:	e7f8      	b.n	8002e60 <__sseek+0x18>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	ffffefff 	.word	0xffffefff

08002e74 <__sclose>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	230e      	movs	r3, #14
 8002e78:	5ec9      	ldrsh	r1, [r1, r3]
 8002e7a:	f000 f809 	bl	8002e90 <_close_r>
 8002e7e:	bd10      	pop	{r4, pc}

08002e80 <memset>:
 8002e80:	0003      	movs	r3, r0
 8002e82:	1882      	adds	r2, r0, r2
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	7019      	strb	r1, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <_close_r>:
 8002e90:	2300      	movs	r3, #0
 8002e92:	b570      	push	{r4, r5, r6, lr}
 8002e94:	4d06      	ldr	r5, [pc, #24]	; (8002eb0 <_close_r+0x20>)
 8002e96:	0004      	movs	r4, r0
 8002e98:	0008      	movs	r0, r1
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	f7fe fa94 	bl	80013c8 <_close>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d103      	bne.n	8002eac <_close_r+0x1c>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d000      	beq.n	8002eac <_close_r+0x1c>
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	20000804 	.word	0x20000804

08002eb4 <_lseek_r>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	0004      	movs	r4, r0
 8002eb8:	0008      	movs	r0, r1
 8002eba:	0011      	movs	r1, r2
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4d05      	ldr	r5, [pc, #20]	; (8002ed8 <_lseek_r+0x24>)
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	f7fe faa1 	bl	800140a <_lseek>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d103      	bne.n	8002ed4 <_lseek_r+0x20>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d000      	beq.n	8002ed4 <_lseek_r+0x20>
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	20000804 	.word	0x20000804

08002edc <_read_r>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	0004      	movs	r4, r0
 8002ee0:	0008      	movs	r0, r1
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4d05      	ldr	r5, [pc, #20]	; (8002f00 <_read_r+0x24>)
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	f7fe fa33 	bl	8001356 <_read>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d103      	bne.n	8002efc <_read_r+0x20>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d000      	beq.n	8002efc <_read_r+0x20>
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000804 	.word	0x20000804

08002f04 <_write_r>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	0004      	movs	r4, r0
 8002f08:	0008      	movs	r0, r1
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4d05      	ldr	r5, [pc, #20]	; (8002f28 <_write_r+0x24>)
 8002f12:	602b      	str	r3, [r5, #0]
 8002f14:	f7fe fa3c 	bl	8001390 <_write>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d103      	bne.n	8002f24 <_write_r+0x20>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d000      	beq.n	8002f24 <_write_r+0x20>
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000804 	.word	0x20000804

08002f2c <__errno>:
 8002f2c:	4b01      	ldr	r3, [pc, #4]	; (8002f34 <__errno+0x8>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	4770      	bx	lr
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000068 	.word	0x20000068

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	4c0c      	ldr	r4, [pc, #48]	; (8002f70 <__libc_init_array+0x38>)
 8002f3e:	4d0d      	ldr	r5, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f40:	1b64      	subs	r4, r4, r5
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	42a6      	cmp	r6, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	2600      	movs	r6, #0
 8002f4a:	f000 fe73 	bl	8003c34 <_init>
 8002f4e:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <__libc_init_array+0x40>)
 8002f50:	4d0a      	ldr	r5, [pc, #40]	; (8002f7c <__libc_init_array+0x44>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	42a6      	cmp	r6, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	00b3      	lsls	r3, r6, #2
 8002f5e:	58eb      	ldr	r3, [r5, r3]
 8002f60:	4798      	blx	r3
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	00b3      	lsls	r3, r6, #2
 8002f68:	58eb      	ldr	r3, [r5, r3]
 8002f6a:	4798      	blx	r3
 8002f6c:	3601      	adds	r6, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08003fdc 	.word	0x08003fdc
 8002f74:	08003fdc 	.word	0x08003fdc
 8002f78:	08003fe0 	.word	0x08003fe0
 8002f7c:	08003fdc 	.word	0x08003fdc

08002f80 <__retarget_lock_init_recursive>:
 8002f80:	4770      	bx	lr

08002f82 <__retarget_lock_acquire_recursive>:
 8002f82:	4770      	bx	lr

08002f84 <__retarget_lock_release_recursive>:
 8002f84:	4770      	bx	lr

08002f86 <memcpy>:
 8002f86:	2300      	movs	r3, #0
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xa>
 8002f8e:	bd10      	pop	{r4, pc}
 8002f90:	5ccc      	ldrb	r4, [r1, r3]
 8002f92:	54c4      	strb	r4, [r0, r3]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e7f8      	b.n	8002f8a <memcpy+0x4>

08002f98 <__assert_func>:
 8002f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002f9a:	0014      	movs	r4, r2
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <__assert_func+0x2c>)
 8002fa0:	0005      	movs	r5, r0
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	000e      	movs	r6, r1
 8002fa6:	68d8      	ldr	r0, [r3, #12]
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <__assert_func+0x30>)
 8002faa:	2c00      	cmp	r4, #0
 8002fac:	d101      	bne.n	8002fb2 <__assert_func+0x1a>
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <__assert_func+0x34>)
 8002fb0:	001c      	movs	r4, r3
 8002fb2:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <__assert_func+0x38>)
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	9402      	str	r4, [sp, #8]
 8002fb8:	002b      	movs	r3, r5
 8002fba:	9600      	str	r6, [sp, #0]
 8002fbc:	f000 f9c8 	bl	8003350 <fiprintf>
 8002fc0:	f000 f9e8 	bl	8003394 <abort>
 8002fc4:	20000068 	.word	0x20000068
 8002fc8:	08003f6c 	.word	0x08003f6c
 8002fcc:	08003fa7 	.word	0x08003fa7
 8002fd0:	08003f79 	.word	0x08003f79

08002fd4 <_free_r>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	0005      	movs	r5, r0
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d010      	beq.n	8002ffe <_free_r+0x2a>
 8002fdc:	1f0c      	subs	r4, r1, #4
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da00      	bge.n	8002fe6 <_free_r+0x12>
 8002fe4:	18e4      	adds	r4, r4, r3
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f000 f8ec 	bl	80031c4 <__malloc_lock>
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <_free_r+0x90>)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <_free_r+0x2c>
 8002ff4:	6063      	str	r3, [r4, #4]
 8002ff6:	6014      	str	r4, [r2, #0]
 8002ff8:	0028      	movs	r0, r5
 8002ffa:	f000 f8eb 	bl	80031d4 <__malloc_unlock>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	42a3      	cmp	r3, r4
 8003002:	d908      	bls.n	8003016 <_free_r+0x42>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	1821      	adds	r1, r4, r0
 8003008:	428b      	cmp	r3, r1
 800300a:	d1f3      	bne.n	8002ff4 <_free_r+0x20>
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	1809      	adds	r1, r1, r0
 8003012:	6021      	str	r1, [r4, #0]
 8003014:	e7ee      	b.n	8002ff4 <_free_r+0x20>
 8003016:	001a      	movs	r2, r3
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <_free_r+0x4e>
 800301e:	42a3      	cmp	r3, r4
 8003020:	d9f9      	bls.n	8003016 <_free_r+0x42>
 8003022:	6811      	ldr	r1, [r2, #0]
 8003024:	1850      	adds	r0, r2, r1
 8003026:	42a0      	cmp	r0, r4
 8003028:	d10b      	bne.n	8003042 <_free_r+0x6e>
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	1809      	adds	r1, r1, r0
 800302e:	1850      	adds	r0, r2, r1
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	4283      	cmp	r3, r0
 8003034:	d1e0      	bne.n	8002ff8 <_free_r+0x24>
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	1841      	adds	r1, r0, r1
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	6053      	str	r3, [r2, #4]
 8003040:	e7da      	b.n	8002ff8 <_free_r+0x24>
 8003042:	42a0      	cmp	r0, r4
 8003044:	d902      	bls.n	800304c <_free_r+0x78>
 8003046:	230c      	movs	r3, #12
 8003048:	602b      	str	r3, [r5, #0]
 800304a:	e7d5      	b.n	8002ff8 <_free_r+0x24>
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	1821      	adds	r1, r4, r0
 8003050:	428b      	cmp	r3, r1
 8003052:	d103      	bne.n	800305c <_free_r+0x88>
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	1809      	adds	r1, r1, r0
 800305a:	6021      	str	r1, [r4, #0]
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	6054      	str	r4, [r2, #4]
 8003060:	e7ca      	b.n	8002ff8 <_free_r+0x24>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	2000080c 	.word	0x2000080c

08003068 <malloc>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4b03      	ldr	r3, [pc, #12]	; (8003078 <malloc+0x10>)
 800306c:	0001      	movs	r1, r0
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	f000 f826 	bl	80030c0 <_malloc_r>
 8003074:	bd10      	pop	{r4, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	20000068 	.word	0x20000068

0800307c <sbrk_aligned>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4e0f      	ldr	r6, [pc, #60]	; (80030bc <sbrk_aligned+0x40>)
 8003080:	000d      	movs	r5, r1
 8003082:	6831      	ldr	r1, [r6, #0]
 8003084:	0004      	movs	r4, r0
 8003086:	2900      	cmp	r1, #0
 8003088:	d102      	bne.n	8003090 <sbrk_aligned+0x14>
 800308a:	f000 f971 	bl	8003370 <_sbrk_r>
 800308e:	6030      	str	r0, [r6, #0]
 8003090:	0029      	movs	r1, r5
 8003092:	0020      	movs	r0, r4
 8003094:	f000 f96c 	bl	8003370 <_sbrk_r>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d00a      	beq.n	80030b2 <sbrk_aligned+0x36>
 800309c:	2303      	movs	r3, #3
 800309e:	1cc5      	adds	r5, r0, #3
 80030a0:	439d      	bics	r5, r3
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	d007      	beq.n	80030b6 <sbrk_aligned+0x3a>
 80030a6:	1a29      	subs	r1, r5, r0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 f961 	bl	8003370 <_sbrk_r>
 80030ae:	3001      	adds	r0, #1
 80030b0:	d101      	bne.n	80030b6 <sbrk_aligned+0x3a>
 80030b2:	2501      	movs	r5, #1
 80030b4:	426d      	negs	r5, r5
 80030b6:	0028      	movs	r0, r5
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	20000810 	.word	0x20000810

080030c0 <_malloc_r>:
 80030c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030c2:	2203      	movs	r2, #3
 80030c4:	1ccb      	adds	r3, r1, #3
 80030c6:	4393      	bics	r3, r2
 80030c8:	3308      	adds	r3, #8
 80030ca:	0006      	movs	r6, r0
 80030cc:	001f      	movs	r7, r3
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d238      	bcs.n	8003144 <_malloc_r+0x84>
 80030d2:	270c      	movs	r7, #12
 80030d4:	42b9      	cmp	r1, r7
 80030d6:	d837      	bhi.n	8003148 <_malloc_r+0x88>
 80030d8:	0030      	movs	r0, r6
 80030da:	f000 f873 	bl	80031c4 <__malloc_lock>
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <_malloc_r+0x100>)
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	001c      	movs	r4, r3
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d133      	bne.n	8003152 <_malloc_r+0x92>
 80030ea:	0039      	movs	r1, r7
 80030ec:	0030      	movs	r0, r6
 80030ee:	f7ff ffc5 	bl	800307c <sbrk_aligned>
 80030f2:	0004      	movs	r4, r0
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d15e      	bne.n	80031b6 <_malloc_r+0xf6>
 80030f8:	9b00      	ldr	r3, [sp, #0]
 80030fa:	681c      	ldr	r4, [r3, #0]
 80030fc:	0025      	movs	r5, r4
 80030fe:	2d00      	cmp	r5, #0
 8003100:	d14e      	bne.n	80031a0 <_malloc_r+0xe0>
 8003102:	2c00      	cmp	r4, #0
 8003104:	d051      	beq.n	80031aa <_malloc_r+0xea>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	0029      	movs	r1, r5
 800310a:	18e3      	adds	r3, r4, r3
 800310c:	0030      	movs	r0, r6
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	f000 f92e 	bl	8003370 <_sbrk_r>
 8003114:	9b01      	ldr	r3, [sp, #4]
 8003116:	4283      	cmp	r3, r0
 8003118:	d147      	bne.n	80031aa <_malloc_r+0xea>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	0030      	movs	r0, r6
 800311e:	1aff      	subs	r7, r7, r3
 8003120:	0039      	movs	r1, r7
 8003122:	f7ff ffab 	bl	800307c <sbrk_aligned>
 8003126:	3001      	adds	r0, #1
 8003128:	d03f      	beq.n	80031aa <_malloc_r+0xea>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	19db      	adds	r3, r3, r7
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	9b00      	ldr	r3, [sp, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d040      	beq.n	80031ba <_malloc_r+0xfa>
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	42a2      	cmp	r2, r4
 800313c:	d133      	bne.n	80031a6 <_malloc_r+0xe6>
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e014      	b.n	800316e <_malloc_r+0xae>
 8003144:	2b00      	cmp	r3, #0
 8003146:	dac5      	bge.n	80030d4 <_malloc_r+0x14>
 8003148:	230c      	movs	r3, #12
 800314a:	2500      	movs	r5, #0
 800314c:	6033      	str	r3, [r6, #0]
 800314e:	0028      	movs	r0, r5
 8003150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	1bc9      	subs	r1, r1, r7
 8003156:	d420      	bmi.n	800319a <_malloc_r+0xda>
 8003158:	290b      	cmp	r1, #11
 800315a:	d918      	bls.n	800318e <_malloc_r+0xce>
 800315c:	19e2      	adds	r2, r4, r7
 800315e:	6027      	str	r7, [r4, #0]
 8003160:	42a3      	cmp	r3, r4
 8003162:	d112      	bne.n	800318a <_malloc_r+0xca>
 8003164:	9b00      	ldr	r3, [sp, #0]
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	6011      	str	r1, [r2, #0]
 800316c:	6053      	str	r3, [r2, #4]
 800316e:	0030      	movs	r0, r6
 8003170:	0025      	movs	r5, r4
 8003172:	f000 f82f 	bl	80031d4 <__malloc_unlock>
 8003176:	2207      	movs	r2, #7
 8003178:	350b      	adds	r5, #11
 800317a:	1d23      	adds	r3, r4, #4
 800317c:	4395      	bics	r5, r2
 800317e:	1aea      	subs	r2, r5, r3
 8003180:	429d      	cmp	r5, r3
 8003182:	d0e4      	beq.n	800314e <_malloc_r+0x8e>
 8003184:	1b5b      	subs	r3, r3, r5
 8003186:	50a3      	str	r3, [r4, r2]
 8003188:	e7e1      	b.n	800314e <_malloc_r+0x8e>
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	e7ec      	b.n	8003168 <_malloc_r+0xa8>
 800318e:	6862      	ldr	r2, [r4, #4]
 8003190:	42a3      	cmp	r3, r4
 8003192:	d1d5      	bne.n	8003140 <_malloc_r+0x80>
 8003194:	9b00      	ldr	r3, [sp, #0]
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e7e9      	b.n	800316e <_malloc_r+0xae>
 800319a:	0023      	movs	r3, r4
 800319c:	6864      	ldr	r4, [r4, #4]
 800319e:	e7a2      	b.n	80030e6 <_malloc_r+0x26>
 80031a0:	002c      	movs	r4, r5
 80031a2:	686d      	ldr	r5, [r5, #4]
 80031a4:	e7ab      	b.n	80030fe <_malloc_r+0x3e>
 80031a6:	0013      	movs	r3, r2
 80031a8:	e7c4      	b.n	8003134 <_malloc_r+0x74>
 80031aa:	230c      	movs	r3, #12
 80031ac:	0030      	movs	r0, r6
 80031ae:	6033      	str	r3, [r6, #0]
 80031b0:	f000 f810 	bl	80031d4 <__malloc_unlock>
 80031b4:	e7cb      	b.n	800314e <_malloc_r+0x8e>
 80031b6:	6027      	str	r7, [r4, #0]
 80031b8:	e7d9      	b.n	800316e <_malloc_r+0xae>
 80031ba:	605b      	str	r3, [r3, #4]
 80031bc:	deff      	udf	#255	; 0xff
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	2000080c 	.word	0x2000080c

080031c4 <__malloc_lock>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4802      	ldr	r0, [pc, #8]	; (80031d0 <__malloc_lock+0xc>)
 80031c8:	f7ff fedb 	bl	8002f82 <__retarget_lock_acquire_recursive>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20000808 	.word	0x20000808

080031d4 <__malloc_unlock>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <__malloc_unlock+0xc>)
 80031d8:	f7ff fed4 	bl	8002f84 <__retarget_lock_release_recursive>
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	20000808 	.word	0x20000808

080031e4 <__sflush_r>:
 80031e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031e6:	898b      	ldrh	r3, [r1, #12]
 80031e8:	0005      	movs	r5, r0
 80031ea:	000c      	movs	r4, r1
 80031ec:	071a      	lsls	r2, r3, #28
 80031ee:	d45c      	bmi.n	80032aa <__sflush_r+0xc6>
 80031f0:	684a      	ldr	r2, [r1, #4]
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	dc04      	bgt.n	8003200 <__sflush_r+0x1c>
 80031f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80031f8:	2a00      	cmp	r2, #0
 80031fa:	dc01      	bgt.n	8003200 <__sflush_r+0x1c>
 80031fc:	2000      	movs	r0, #0
 80031fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003200:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003202:	2f00      	cmp	r7, #0
 8003204:	d0fa      	beq.n	80031fc <__sflush_r+0x18>
 8003206:	2200      	movs	r2, #0
 8003208:	2080      	movs	r0, #128	; 0x80
 800320a:	682e      	ldr	r6, [r5, #0]
 800320c:	602a      	str	r2, [r5, #0]
 800320e:	001a      	movs	r2, r3
 8003210:	0140      	lsls	r0, r0, #5
 8003212:	6a21      	ldr	r1, [r4, #32]
 8003214:	4002      	ands	r2, r0
 8003216:	4203      	tst	r3, r0
 8003218:	d034      	beq.n	8003284 <__sflush_r+0xa0>
 800321a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	075b      	lsls	r3, r3, #29
 8003220:	d506      	bpl.n	8003230 <__sflush_r+0x4c>
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	1ac0      	subs	r0, r0, r3
 8003226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <__sflush_r+0x4c>
 800322c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800322e:	1ac0      	subs	r0, r0, r3
 8003230:	0002      	movs	r2, r0
 8003232:	2300      	movs	r3, #0
 8003234:	0028      	movs	r0, r5
 8003236:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003238:	6a21      	ldr	r1, [r4, #32]
 800323a:	47b8      	blx	r7
 800323c:	89a2      	ldrh	r2, [r4, #12]
 800323e:	1c43      	adds	r3, r0, #1
 8003240:	d106      	bne.n	8003250 <__sflush_r+0x6c>
 8003242:	6829      	ldr	r1, [r5, #0]
 8003244:	291d      	cmp	r1, #29
 8003246:	d82c      	bhi.n	80032a2 <__sflush_r+0xbe>
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <__sflush_r+0x110>)
 800324a:	410b      	asrs	r3, r1
 800324c:	07db      	lsls	r3, r3, #31
 800324e:	d428      	bmi.n	80032a2 <__sflush_r+0xbe>
 8003250:	2300      	movs	r3, #0
 8003252:	6063      	str	r3, [r4, #4]
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	04d2      	lsls	r2, r2, #19
 800325a:	d505      	bpl.n	8003268 <__sflush_r+0x84>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <__sflush_r+0x82>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d100      	bne.n	8003268 <__sflush_r+0x84>
 8003266:	6560      	str	r0, [r4, #84]	; 0x54
 8003268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800326a:	602e      	str	r6, [r5, #0]
 800326c:	2900      	cmp	r1, #0
 800326e:	d0c5      	beq.n	80031fc <__sflush_r+0x18>
 8003270:	0023      	movs	r3, r4
 8003272:	3344      	adds	r3, #68	; 0x44
 8003274:	4299      	cmp	r1, r3
 8003276:	d002      	beq.n	800327e <__sflush_r+0x9a>
 8003278:	0028      	movs	r0, r5
 800327a:	f7ff feab 	bl	8002fd4 <_free_r>
 800327e:	2000      	movs	r0, #0
 8003280:	6360      	str	r0, [r4, #52]	; 0x34
 8003282:	e7bc      	b.n	80031fe <__sflush_r+0x1a>
 8003284:	2301      	movs	r3, #1
 8003286:	0028      	movs	r0, r5
 8003288:	47b8      	blx	r7
 800328a:	1c43      	adds	r3, r0, #1
 800328c:	d1c6      	bne.n	800321c <__sflush_r+0x38>
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0c3      	beq.n	800321c <__sflush_r+0x38>
 8003294:	2b1d      	cmp	r3, #29
 8003296:	d001      	beq.n	800329c <__sflush_r+0xb8>
 8003298:	2b16      	cmp	r3, #22
 800329a:	d101      	bne.n	80032a0 <__sflush_r+0xbc>
 800329c:	602e      	str	r6, [r5, #0]
 800329e:	e7ad      	b.n	80031fc <__sflush_r+0x18>
 80032a0:	89a2      	ldrh	r2, [r4, #12]
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	4313      	orrs	r3, r2
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	e7a9      	b.n	80031fe <__sflush_r+0x1a>
 80032aa:	690e      	ldr	r6, [r1, #16]
 80032ac:	2e00      	cmp	r6, #0
 80032ae:	d0a5      	beq.n	80031fc <__sflush_r+0x18>
 80032b0:	680f      	ldr	r7, [r1, #0]
 80032b2:	600e      	str	r6, [r1, #0]
 80032b4:	1bba      	subs	r2, r7, r6
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	079b      	lsls	r3, r3, #30
 80032bc:	d100      	bne.n	80032c0 <__sflush_r+0xdc>
 80032be:	694a      	ldr	r2, [r1, #20]
 80032c0:	60a2      	str	r2, [r4, #8]
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dd99      	ble.n	80031fc <__sflush_r+0x18>
 80032c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032ca:	0032      	movs	r2, r6
 80032cc:	001f      	movs	r7, r3
 80032ce:	0028      	movs	r0, r5
 80032d0:	9b01      	ldr	r3, [sp, #4]
 80032d2:	6a21      	ldr	r1, [r4, #32]
 80032d4:	47b8      	blx	r7
 80032d6:	2800      	cmp	r0, #0
 80032d8:	dc06      	bgt.n	80032e8 <__sflush_r+0x104>
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	2001      	movs	r0, #1
 80032de:	89a2      	ldrh	r2, [r4, #12]
 80032e0:	4240      	negs	r0, r0
 80032e2:	4313      	orrs	r3, r2
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	e78a      	b.n	80031fe <__sflush_r+0x1a>
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	1836      	adds	r6, r6, r0
 80032ec:	1a1b      	subs	r3, r3, r0
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	e7e7      	b.n	80032c2 <__sflush_r+0xde>
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	dfbffffe 	.word	0xdfbffffe

080032f8 <_fflush_r>:
 80032f8:	690b      	ldr	r3, [r1, #16]
 80032fa:	b570      	push	{r4, r5, r6, lr}
 80032fc:	0005      	movs	r5, r0
 80032fe:	000c      	movs	r4, r1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <_fflush_r+0x12>
 8003304:	2500      	movs	r5, #0
 8003306:	0028      	movs	r0, r5
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	2800      	cmp	r0, #0
 800330c:	d004      	beq.n	8003318 <_fflush_r+0x20>
 800330e:	6a03      	ldr	r3, [r0, #32]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <_fflush_r+0x20>
 8003314:	f7ff fd34 	bl	8002d80 <__sinit>
 8003318:	220c      	movs	r2, #12
 800331a:	5ea3      	ldrsh	r3, [r4, r2]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f1      	beq.n	8003304 <_fflush_r+0xc>
 8003320:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003322:	07d2      	lsls	r2, r2, #31
 8003324:	d404      	bmi.n	8003330 <_fflush_r+0x38>
 8003326:	059b      	lsls	r3, r3, #22
 8003328:	d402      	bmi.n	8003330 <_fflush_r+0x38>
 800332a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332c:	f7ff fe29 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8003330:	0028      	movs	r0, r5
 8003332:	0021      	movs	r1, r4
 8003334:	f7ff ff56 	bl	80031e4 <__sflush_r>
 8003338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800333a:	0005      	movs	r5, r0
 800333c:	07db      	lsls	r3, r3, #31
 800333e:	d4e2      	bmi.n	8003306 <_fflush_r+0xe>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	059b      	lsls	r3, r3, #22
 8003344:	d4df      	bmi.n	8003306 <_fflush_r+0xe>
 8003346:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003348:	f7ff fe1c 	bl	8002f84 <__retarget_lock_release_recursive>
 800334c:	e7db      	b.n	8003306 <_fflush_r+0xe>
	...

08003350 <fiprintf>:
 8003350:	b40e      	push	{r1, r2, r3}
 8003352:	b517      	push	{r0, r1, r2, r4, lr}
 8003354:	4c05      	ldr	r4, [pc, #20]	; (800336c <fiprintf+0x1c>)
 8003356:	ab05      	add	r3, sp, #20
 8003358:	cb04      	ldmia	r3!, {r2}
 800335a:	0001      	movs	r1, r0
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	f000 f846 	bl	80033f0 <_vfiprintf_r>
 8003364:	bc1e      	pop	{r1, r2, r3, r4}
 8003366:	bc08      	pop	{r3}
 8003368:	b003      	add	sp, #12
 800336a:	4718      	bx	r3
 800336c:	20000068 	.word	0x20000068

08003370 <_sbrk_r>:
 8003370:	2300      	movs	r3, #0
 8003372:	b570      	push	{r4, r5, r6, lr}
 8003374:	4d06      	ldr	r5, [pc, #24]	; (8003390 <_sbrk_r+0x20>)
 8003376:	0004      	movs	r4, r0
 8003378:	0008      	movs	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fe f850 	bl	8001420 <_sbrk>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d103      	bne.n	800338c <_sbrk_r+0x1c>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d000      	beq.n	800338c <_sbrk_r+0x1c>
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000804 	.word	0x20000804

08003394 <abort>:
 8003394:	2006      	movs	r0, #6
 8003396:	b510      	push	{r4, lr}
 8003398:	f000 fb96 	bl	8003ac8 <raise>
 800339c:	2001      	movs	r0, #1
 800339e:	f7fd ffce 	bl	800133e <_exit>

080033a2 <__sfputc_r>:
 80033a2:	6893      	ldr	r3, [r2, #8]
 80033a4:	b510      	push	{r4, lr}
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6093      	str	r3, [r2, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da04      	bge.n	80033b8 <__sfputc_r+0x16>
 80033ae:	6994      	ldr	r4, [r2, #24]
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	db07      	blt.n	80033c4 <__sfputc_r+0x22>
 80033b4:	290a      	cmp	r1, #10
 80033b6:	d005      	beq.n	80033c4 <__sfputc_r+0x22>
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	1c58      	adds	r0, r3, #1
 80033bc:	6010      	str	r0, [r2, #0]
 80033be:	7019      	strb	r1, [r3, #0]
 80033c0:	0008      	movs	r0, r1
 80033c2:	bd10      	pop	{r4, pc}
 80033c4:	f000 fab0 	bl	8003928 <__swbuf_r>
 80033c8:	0001      	movs	r1, r0
 80033ca:	e7f9      	b.n	80033c0 <__sfputc_r+0x1e>

080033cc <__sfputs_r>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	0006      	movs	r6, r0
 80033d0:	000f      	movs	r7, r1
 80033d2:	0014      	movs	r4, r2
 80033d4:	18d5      	adds	r5, r2, r3
 80033d6:	42ac      	cmp	r4, r5
 80033d8:	d101      	bne.n	80033de <__sfputs_r+0x12>
 80033da:	2000      	movs	r0, #0
 80033dc:	e007      	b.n	80033ee <__sfputs_r+0x22>
 80033de:	7821      	ldrb	r1, [r4, #0]
 80033e0:	003a      	movs	r2, r7
 80033e2:	0030      	movs	r0, r6
 80033e4:	f7ff ffdd 	bl	80033a2 <__sfputc_r>
 80033e8:	3401      	adds	r4, #1
 80033ea:	1c43      	adds	r3, r0, #1
 80033ec:	d1f3      	bne.n	80033d6 <__sfputs_r+0xa>
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033f0 <_vfiprintf_r>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	b0a1      	sub	sp, #132	; 0x84
 80033f4:	000f      	movs	r7, r1
 80033f6:	0015      	movs	r5, r2
 80033f8:	001e      	movs	r6, r3
 80033fa:	9003      	str	r0, [sp, #12]
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d004      	beq.n	800340a <_vfiprintf_r+0x1a>
 8003400:	6a03      	ldr	r3, [r0, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <_vfiprintf_r+0x1a>
 8003406:	f7ff fcbb 	bl	8002d80 <__sinit>
 800340a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340c:	07db      	lsls	r3, r3, #31
 800340e:	d405      	bmi.n	800341c <_vfiprintf_r+0x2c>
 8003410:	89bb      	ldrh	r3, [r7, #12]
 8003412:	059b      	lsls	r3, r3, #22
 8003414:	d402      	bmi.n	800341c <_vfiprintf_r+0x2c>
 8003416:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003418:	f7ff fdb3 	bl	8002f82 <__retarget_lock_acquire_recursive>
 800341c:	89bb      	ldrh	r3, [r7, #12]
 800341e:	071b      	lsls	r3, r3, #28
 8003420:	d502      	bpl.n	8003428 <_vfiprintf_r+0x38>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d113      	bne.n	8003450 <_vfiprintf_r+0x60>
 8003428:	0039      	movs	r1, r7
 800342a:	9803      	ldr	r0, [sp, #12]
 800342c:	f000 fabe 	bl	80039ac <__swsetup_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	d00d      	beq.n	8003450 <_vfiprintf_r+0x60>
 8003434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003436:	07db      	lsls	r3, r3, #31
 8003438:	d503      	bpl.n	8003442 <_vfiprintf_r+0x52>
 800343a:	2001      	movs	r0, #1
 800343c:	4240      	negs	r0, r0
 800343e:	b021      	add	sp, #132	; 0x84
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003442:	89bb      	ldrh	r3, [r7, #12]
 8003444:	059b      	lsls	r3, r3, #22
 8003446:	d4f8      	bmi.n	800343a <_vfiprintf_r+0x4a>
 8003448:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800344a:	f7ff fd9b 	bl	8002f84 <__retarget_lock_release_recursive>
 800344e:	e7f4      	b.n	800343a <_vfiprintf_r+0x4a>
 8003450:	2300      	movs	r3, #0
 8003452:	ac08      	add	r4, sp, #32
 8003454:	6163      	str	r3, [r4, #20]
 8003456:	3320      	adds	r3, #32
 8003458:	7663      	strb	r3, [r4, #25]
 800345a:	3310      	adds	r3, #16
 800345c:	76a3      	strb	r3, [r4, #26]
 800345e:	9607      	str	r6, [sp, #28]
 8003460:	002e      	movs	r6, r5
 8003462:	7833      	ldrb	r3, [r6, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <_vfiprintf_r+0x7c>
 8003468:	2b25      	cmp	r3, #37	; 0x25
 800346a:	d148      	bne.n	80034fe <_vfiprintf_r+0x10e>
 800346c:	1b73      	subs	r3, r6, r5
 800346e:	9305      	str	r3, [sp, #20]
 8003470:	42ae      	cmp	r6, r5
 8003472:	d00b      	beq.n	800348c <_vfiprintf_r+0x9c>
 8003474:	002a      	movs	r2, r5
 8003476:	0039      	movs	r1, r7
 8003478:	9803      	ldr	r0, [sp, #12]
 800347a:	f7ff ffa7 	bl	80033cc <__sfputs_r>
 800347e:	3001      	adds	r0, #1
 8003480:	d100      	bne.n	8003484 <_vfiprintf_r+0x94>
 8003482:	e0af      	b.n	80035e4 <_vfiprintf_r+0x1f4>
 8003484:	6963      	ldr	r3, [r4, #20]
 8003486:	9a05      	ldr	r2, [sp, #20]
 8003488:	189b      	adds	r3, r3, r2
 800348a:	6163      	str	r3, [r4, #20]
 800348c:	7833      	ldrb	r3, [r6, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d100      	bne.n	8003494 <_vfiprintf_r+0xa4>
 8003492:	e0a7      	b.n	80035e4 <_vfiprintf_r+0x1f4>
 8003494:	2201      	movs	r2, #1
 8003496:	2300      	movs	r3, #0
 8003498:	4252      	negs	r2, r2
 800349a:	6062      	str	r2, [r4, #4]
 800349c:	a904      	add	r1, sp, #16
 800349e:	3254      	adds	r2, #84	; 0x54
 80034a0:	1852      	adds	r2, r2, r1
 80034a2:	1c75      	adds	r5, r6, #1
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	60e3      	str	r3, [r4, #12]
 80034a8:	60a3      	str	r3, [r4, #8]
 80034aa:	7013      	strb	r3, [r2, #0]
 80034ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80034ae:	4b59      	ldr	r3, [pc, #356]	; (8003614 <_vfiprintf_r+0x224>)
 80034b0:	2205      	movs	r2, #5
 80034b2:	0018      	movs	r0, r3
 80034b4:	7829      	ldrb	r1, [r5, #0]
 80034b6:	9305      	str	r3, [sp, #20]
 80034b8:	f000 fb26 	bl	8003b08 <memchr>
 80034bc:	1c6e      	adds	r6, r5, #1
 80034be:	2800      	cmp	r0, #0
 80034c0:	d11f      	bne.n	8003502 <_vfiprintf_r+0x112>
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	06d3      	lsls	r3, r2, #27
 80034c6:	d504      	bpl.n	80034d2 <_vfiprintf_r+0xe2>
 80034c8:	2353      	movs	r3, #83	; 0x53
 80034ca:	a904      	add	r1, sp, #16
 80034cc:	185b      	adds	r3, r3, r1
 80034ce:	2120      	movs	r1, #32
 80034d0:	7019      	strb	r1, [r3, #0]
 80034d2:	0713      	lsls	r3, r2, #28
 80034d4:	d504      	bpl.n	80034e0 <_vfiprintf_r+0xf0>
 80034d6:	2353      	movs	r3, #83	; 0x53
 80034d8:	a904      	add	r1, sp, #16
 80034da:	185b      	adds	r3, r3, r1
 80034dc:	212b      	movs	r1, #43	; 0x2b
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	782b      	ldrb	r3, [r5, #0]
 80034e2:	2b2a      	cmp	r3, #42	; 0x2a
 80034e4:	d016      	beq.n	8003514 <_vfiprintf_r+0x124>
 80034e6:	002e      	movs	r6, r5
 80034e8:	2100      	movs	r1, #0
 80034ea:	200a      	movs	r0, #10
 80034ec:	68e3      	ldr	r3, [r4, #12]
 80034ee:	7832      	ldrb	r2, [r6, #0]
 80034f0:	1c75      	adds	r5, r6, #1
 80034f2:	3a30      	subs	r2, #48	; 0x30
 80034f4:	2a09      	cmp	r2, #9
 80034f6:	d94e      	bls.n	8003596 <_vfiprintf_r+0x1a6>
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d111      	bne.n	8003520 <_vfiprintf_r+0x130>
 80034fc:	e017      	b.n	800352e <_vfiprintf_r+0x13e>
 80034fe:	3601      	adds	r6, #1
 8003500:	e7af      	b.n	8003462 <_vfiprintf_r+0x72>
 8003502:	9b05      	ldr	r3, [sp, #20]
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	1ac0      	subs	r0, r0, r3
 8003508:	2301      	movs	r3, #1
 800350a:	4083      	lsls	r3, r0
 800350c:	4313      	orrs	r3, r2
 800350e:	0035      	movs	r5, r6
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	e7cc      	b.n	80034ae <_vfiprintf_r+0xbe>
 8003514:	9b07      	ldr	r3, [sp, #28]
 8003516:	1d19      	adds	r1, r3, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	9107      	str	r1, [sp, #28]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db01      	blt.n	8003524 <_vfiprintf_r+0x134>
 8003520:	930b      	str	r3, [sp, #44]	; 0x2c
 8003522:	e004      	b.n	800352e <_vfiprintf_r+0x13e>
 8003524:	425b      	negs	r3, r3
 8003526:	60e3      	str	r3, [r4, #12]
 8003528:	2302      	movs	r3, #2
 800352a:	4313      	orrs	r3, r2
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	7833      	ldrb	r3, [r6, #0]
 8003530:	2b2e      	cmp	r3, #46	; 0x2e
 8003532:	d10a      	bne.n	800354a <_vfiprintf_r+0x15a>
 8003534:	7873      	ldrb	r3, [r6, #1]
 8003536:	2b2a      	cmp	r3, #42	; 0x2a
 8003538:	d135      	bne.n	80035a6 <_vfiprintf_r+0x1b6>
 800353a:	9b07      	ldr	r3, [sp, #28]
 800353c:	3602      	adds	r6, #2
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	9207      	str	r2, [sp, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db2b      	blt.n	80035a0 <_vfiprintf_r+0x1b0>
 8003548:	9309      	str	r3, [sp, #36]	; 0x24
 800354a:	4d33      	ldr	r5, [pc, #204]	; (8003618 <_vfiprintf_r+0x228>)
 800354c:	2203      	movs	r2, #3
 800354e:	0028      	movs	r0, r5
 8003550:	7831      	ldrb	r1, [r6, #0]
 8003552:	f000 fad9 	bl	8003b08 <memchr>
 8003556:	2800      	cmp	r0, #0
 8003558:	d006      	beq.n	8003568 <_vfiprintf_r+0x178>
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	1b40      	subs	r0, r0, r5
 800355e:	4083      	lsls	r3, r0
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	3601      	adds	r6, #1
 8003564:	4313      	orrs	r3, r2
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	7831      	ldrb	r1, [r6, #0]
 800356a:	2206      	movs	r2, #6
 800356c:	482b      	ldr	r0, [pc, #172]	; (800361c <_vfiprintf_r+0x22c>)
 800356e:	1c75      	adds	r5, r6, #1
 8003570:	7621      	strb	r1, [r4, #24]
 8003572:	f000 fac9 	bl	8003b08 <memchr>
 8003576:	2800      	cmp	r0, #0
 8003578:	d043      	beq.n	8003602 <_vfiprintf_r+0x212>
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <_vfiprintf_r+0x230>)
 800357c:	2b00      	cmp	r3, #0
 800357e:	d125      	bne.n	80035cc <_vfiprintf_r+0x1dc>
 8003580:	2207      	movs	r2, #7
 8003582:	9b07      	ldr	r3, [sp, #28]
 8003584:	3307      	adds	r3, #7
 8003586:	4393      	bics	r3, r2
 8003588:	3308      	adds	r3, #8
 800358a:	9307      	str	r3, [sp, #28]
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	9a04      	ldr	r2, [sp, #16]
 8003590:	189b      	adds	r3, r3, r2
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	e764      	b.n	8003460 <_vfiprintf_r+0x70>
 8003596:	4343      	muls	r3, r0
 8003598:	002e      	movs	r6, r5
 800359a:	2101      	movs	r1, #1
 800359c:	189b      	adds	r3, r3, r2
 800359e:	e7a6      	b.n	80034ee <_vfiprintf_r+0xfe>
 80035a0:	2301      	movs	r3, #1
 80035a2:	425b      	negs	r3, r3
 80035a4:	e7d0      	b.n	8003548 <_vfiprintf_r+0x158>
 80035a6:	2300      	movs	r3, #0
 80035a8:	200a      	movs	r0, #10
 80035aa:	001a      	movs	r2, r3
 80035ac:	3601      	adds	r6, #1
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	7831      	ldrb	r1, [r6, #0]
 80035b2:	1c75      	adds	r5, r6, #1
 80035b4:	3930      	subs	r1, #48	; 0x30
 80035b6:	2909      	cmp	r1, #9
 80035b8:	d903      	bls.n	80035c2 <_vfiprintf_r+0x1d2>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0c5      	beq.n	800354a <_vfiprintf_r+0x15a>
 80035be:	9209      	str	r2, [sp, #36]	; 0x24
 80035c0:	e7c3      	b.n	800354a <_vfiprintf_r+0x15a>
 80035c2:	4342      	muls	r2, r0
 80035c4:	002e      	movs	r6, r5
 80035c6:	2301      	movs	r3, #1
 80035c8:	1852      	adds	r2, r2, r1
 80035ca:	e7f1      	b.n	80035b0 <_vfiprintf_r+0x1c0>
 80035cc:	aa07      	add	r2, sp, #28
 80035ce:	9200      	str	r2, [sp, #0]
 80035d0:	0021      	movs	r1, r4
 80035d2:	003a      	movs	r2, r7
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <_vfiprintf_r+0x234>)
 80035d6:	9803      	ldr	r0, [sp, #12]
 80035d8:	e000      	b.n	80035dc <_vfiprintf_r+0x1ec>
 80035da:	bf00      	nop
 80035dc:	9004      	str	r0, [sp, #16]
 80035de:	9b04      	ldr	r3, [sp, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	d1d3      	bne.n	800358c <_vfiprintf_r+0x19c>
 80035e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e6:	07db      	lsls	r3, r3, #31
 80035e8:	d405      	bmi.n	80035f6 <_vfiprintf_r+0x206>
 80035ea:	89bb      	ldrh	r3, [r7, #12]
 80035ec:	059b      	lsls	r3, r3, #22
 80035ee:	d402      	bmi.n	80035f6 <_vfiprintf_r+0x206>
 80035f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80035f2:	f7ff fcc7 	bl	8002f84 <__retarget_lock_release_recursive>
 80035f6:	89bb      	ldrh	r3, [r7, #12]
 80035f8:	065b      	lsls	r3, r3, #25
 80035fa:	d500      	bpl.n	80035fe <_vfiprintf_r+0x20e>
 80035fc:	e71d      	b.n	800343a <_vfiprintf_r+0x4a>
 80035fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003600:	e71d      	b.n	800343e <_vfiprintf_r+0x4e>
 8003602:	aa07      	add	r2, sp, #28
 8003604:	9200      	str	r2, [sp, #0]
 8003606:	0021      	movs	r1, r4
 8003608:	003a      	movs	r2, r7
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <_vfiprintf_r+0x234>)
 800360c:	9803      	ldr	r0, [sp, #12]
 800360e:	f000 f87b 	bl	8003708 <_printf_i>
 8003612:	e7e3      	b.n	80035dc <_vfiprintf_r+0x1ec>
 8003614:	08003fa8 	.word	0x08003fa8
 8003618:	08003fae 	.word	0x08003fae
 800361c:	08003fb2 	.word	0x08003fb2
 8003620:	00000000 	.word	0x00000000
 8003624:	080033cd 	.word	0x080033cd

08003628 <_printf_common>:
 8003628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800362a:	0016      	movs	r6, r2
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	688a      	ldr	r2, [r1, #8]
 8003630:	690b      	ldr	r3, [r1, #16]
 8003632:	000c      	movs	r4, r1
 8003634:	9000      	str	r0, [sp, #0]
 8003636:	4293      	cmp	r3, r2
 8003638:	da00      	bge.n	800363c <_printf_common+0x14>
 800363a:	0013      	movs	r3, r2
 800363c:	0022      	movs	r2, r4
 800363e:	6033      	str	r3, [r6, #0]
 8003640:	3243      	adds	r2, #67	; 0x43
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	2a00      	cmp	r2, #0
 8003646:	d001      	beq.n	800364c <_printf_common+0x24>
 8003648:	3301      	adds	r3, #1
 800364a:	6033      	str	r3, [r6, #0]
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	d502      	bpl.n	8003658 <_printf_common+0x30>
 8003652:	6833      	ldr	r3, [r6, #0]
 8003654:	3302      	adds	r3, #2
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	2306      	movs	r3, #6
 800365c:	0015      	movs	r5, r2
 800365e:	401d      	ands	r5, r3
 8003660:	421a      	tst	r2, r3
 8003662:	d027      	beq.n	80036b4 <_printf_common+0x8c>
 8003664:	0023      	movs	r3, r4
 8003666:	3343      	adds	r3, #67	; 0x43
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	4193      	sbcs	r3, r2
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	0692      	lsls	r2, r2, #26
 8003672:	d430      	bmi.n	80036d6 <_printf_common+0xae>
 8003674:	0022      	movs	r2, r4
 8003676:	9901      	ldr	r1, [sp, #4]
 8003678:	9800      	ldr	r0, [sp, #0]
 800367a:	9d08      	ldr	r5, [sp, #32]
 800367c:	3243      	adds	r2, #67	; 0x43
 800367e:	47a8      	blx	r5
 8003680:	3001      	adds	r0, #1
 8003682:	d025      	beq.n	80036d0 <_printf_common+0xa8>
 8003684:	2206      	movs	r2, #6
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	2500      	movs	r5, #0
 800368a:	4013      	ands	r3, r2
 800368c:	2b04      	cmp	r3, #4
 800368e:	d105      	bne.n	800369c <_printf_common+0x74>
 8003690:	6833      	ldr	r3, [r6, #0]
 8003692:	68e5      	ldr	r5, [r4, #12]
 8003694:	1aed      	subs	r5, r5, r3
 8003696:	43eb      	mvns	r3, r5
 8003698:	17db      	asrs	r3, r3, #31
 800369a:	401d      	ands	r5, r3
 800369c:	68a3      	ldr	r3, [r4, #8]
 800369e:	6922      	ldr	r2, [r4, #16]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	dd01      	ble.n	80036a8 <_printf_common+0x80>
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	18ed      	adds	r5, r5, r3
 80036a8:	2600      	movs	r6, #0
 80036aa:	42b5      	cmp	r5, r6
 80036ac:	d120      	bne.n	80036f0 <_printf_common+0xc8>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e010      	b.n	80036d4 <_printf_common+0xac>
 80036b2:	3501      	adds	r5, #1
 80036b4:	68e3      	ldr	r3, [r4, #12]
 80036b6:	6832      	ldr	r2, [r6, #0]
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	42ab      	cmp	r3, r5
 80036bc:	ddd2      	ble.n	8003664 <_printf_common+0x3c>
 80036be:	0022      	movs	r2, r4
 80036c0:	2301      	movs	r3, #1
 80036c2:	9901      	ldr	r1, [sp, #4]
 80036c4:	9800      	ldr	r0, [sp, #0]
 80036c6:	9f08      	ldr	r7, [sp, #32]
 80036c8:	3219      	adds	r2, #25
 80036ca:	47b8      	blx	r7
 80036cc:	3001      	adds	r0, #1
 80036ce:	d1f0      	bne.n	80036b2 <_printf_common+0x8a>
 80036d0:	2001      	movs	r0, #1
 80036d2:	4240      	negs	r0, r0
 80036d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036d6:	2030      	movs	r0, #48	; 0x30
 80036d8:	18e1      	adds	r1, r4, r3
 80036da:	3143      	adds	r1, #67	; 0x43
 80036dc:	7008      	strb	r0, [r1, #0]
 80036de:	0021      	movs	r1, r4
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	3145      	adds	r1, #69	; 0x45
 80036e4:	7809      	ldrb	r1, [r1, #0]
 80036e6:	18a2      	adds	r2, r4, r2
 80036e8:	3243      	adds	r2, #67	; 0x43
 80036ea:	3302      	adds	r3, #2
 80036ec:	7011      	strb	r1, [r2, #0]
 80036ee:	e7c1      	b.n	8003674 <_printf_common+0x4c>
 80036f0:	0022      	movs	r2, r4
 80036f2:	2301      	movs	r3, #1
 80036f4:	9901      	ldr	r1, [sp, #4]
 80036f6:	9800      	ldr	r0, [sp, #0]
 80036f8:	9f08      	ldr	r7, [sp, #32]
 80036fa:	321a      	adds	r2, #26
 80036fc:	47b8      	blx	r7
 80036fe:	3001      	adds	r0, #1
 8003700:	d0e6      	beq.n	80036d0 <_printf_common+0xa8>
 8003702:	3601      	adds	r6, #1
 8003704:	e7d1      	b.n	80036aa <_printf_common+0x82>
	...

08003708 <_printf_i>:
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b08b      	sub	sp, #44	; 0x2c
 800370c:	9206      	str	r2, [sp, #24]
 800370e:	000a      	movs	r2, r1
 8003710:	3243      	adds	r2, #67	; 0x43
 8003712:	9307      	str	r3, [sp, #28]
 8003714:	9005      	str	r0, [sp, #20]
 8003716:	9204      	str	r2, [sp, #16]
 8003718:	7e0a      	ldrb	r2, [r1, #24]
 800371a:	000c      	movs	r4, r1
 800371c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800371e:	2a78      	cmp	r2, #120	; 0x78
 8003720:	d809      	bhi.n	8003736 <_printf_i+0x2e>
 8003722:	2a62      	cmp	r2, #98	; 0x62
 8003724:	d80b      	bhi.n	800373e <_printf_i+0x36>
 8003726:	2a00      	cmp	r2, #0
 8003728:	d100      	bne.n	800372c <_printf_i+0x24>
 800372a:	e0be      	b.n	80038aa <_printf_i+0x1a2>
 800372c:	497c      	ldr	r1, [pc, #496]	; (8003920 <_printf_i+0x218>)
 800372e:	9103      	str	r1, [sp, #12]
 8003730:	2a58      	cmp	r2, #88	; 0x58
 8003732:	d100      	bne.n	8003736 <_printf_i+0x2e>
 8003734:	e093      	b.n	800385e <_printf_i+0x156>
 8003736:	0026      	movs	r6, r4
 8003738:	3642      	adds	r6, #66	; 0x42
 800373a:	7032      	strb	r2, [r6, #0]
 800373c:	e022      	b.n	8003784 <_printf_i+0x7c>
 800373e:	0010      	movs	r0, r2
 8003740:	3863      	subs	r0, #99	; 0x63
 8003742:	2815      	cmp	r0, #21
 8003744:	d8f7      	bhi.n	8003736 <_printf_i+0x2e>
 8003746:	f7fc fcdf 	bl	8000108 <__gnu_thumb1_case_shi>
 800374a:	0016      	.short	0x0016
 800374c:	fff6001f 	.word	0xfff6001f
 8003750:	fff6fff6 	.word	0xfff6fff6
 8003754:	001ffff6 	.word	0x001ffff6
 8003758:	fff6fff6 	.word	0xfff6fff6
 800375c:	fff6fff6 	.word	0xfff6fff6
 8003760:	003600a3 	.word	0x003600a3
 8003764:	fff60083 	.word	0xfff60083
 8003768:	00b4fff6 	.word	0x00b4fff6
 800376c:	0036fff6 	.word	0x0036fff6
 8003770:	fff6fff6 	.word	0xfff6fff6
 8003774:	0087      	.short	0x0087
 8003776:	0026      	movs	r6, r4
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	3642      	adds	r6, #66	; 0x42
 800377c:	1d11      	adds	r1, r2, #4
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	7033      	strb	r3, [r6, #0]
 8003784:	2301      	movs	r3, #1
 8003786:	e0a2      	b.n	80038ce <_printf_i+0x1c6>
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	6809      	ldr	r1, [r1, #0]
 800378c:	1d02      	adds	r2, r0, #4
 800378e:	060d      	lsls	r5, r1, #24
 8003790:	d50b      	bpl.n	80037aa <_printf_i+0xa2>
 8003792:	6805      	ldr	r5, [r0, #0]
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	2d00      	cmp	r5, #0
 8003798:	da03      	bge.n	80037a2 <_printf_i+0x9a>
 800379a:	232d      	movs	r3, #45	; 0x2d
 800379c:	9a04      	ldr	r2, [sp, #16]
 800379e:	426d      	negs	r5, r5
 80037a0:	7013      	strb	r3, [r2, #0]
 80037a2:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <_printf_i+0x218>)
 80037a4:	270a      	movs	r7, #10
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	e01b      	b.n	80037e2 <_printf_i+0xda>
 80037aa:	6805      	ldr	r5, [r0, #0]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	0649      	lsls	r1, r1, #25
 80037b0:	d5f1      	bpl.n	8003796 <_printf_i+0x8e>
 80037b2:	b22d      	sxth	r5, r5
 80037b4:	e7ef      	b.n	8003796 <_printf_i+0x8e>
 80037b6:	680d      	ldr	r5, [r1, #0]
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	1d08      	adds	r0, r1, #4
 80037bc:	6018      	str	r0, [r3, #0]
 80037be:	062e      	lsls	r6, r5, #24
 80037c0:	d501      	bpl.n	80037c6 <_printf_i+0xbe>
 80037c2:	680d      	ldr	r5, [r1, #0]
 80037c4:	e003      	b.n	80037ce <_printf_i+0xc6>
 80037c6:	066d      	lsls	r5, r5, #25
 80037c8:	d5fb      	bpl.n	80037c2 <_printf_i+0xba>
 80037ca:	680d      	ldr	r5, [r1, #0]
 80037cc:	b2ad      	uxth	r5, r5
 80037ce:	4b54      	ldr	r3, [pc, #336]	; (8003920 <_printf_i+0x218>)
 80037d0:	2708      	movs	r7, #8
 80037d2:	9303      	str	r3, [sp, #12]
 80037d4:	2a6f      	cmp	r2, #111	; 0x6f
 80037d6:	d000      	beq.n	80037da <_printf_i+0xd2>
 80037d8:	3702      	adds	r7, #2
 80037da:	0023      	movs	r3, r4
 80037dc:	2200      	movs	r2, #0
 80037de:	3343      	adds	r3, #67	; 0x43
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	60a3      	str	r3, [r4, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db03      	blt.n	80037f2 <_printf_i+0xea>
 80037ea:	2104      	movs	r1, #4
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	438a      	bics	r2, r1
 80037f0:	6022      	str	r2, [r4, #0]
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	d102      	bne.n	80037fc <_printf_i+0xf4>
 80037f6:	9e04      	ldr	r6, [sp, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <_printf_i+0x10e>
 80037fc:	9e04      	ldr	r6, [sp, #16]
 80037fe:	0028      	movs	r0, r5
 8003800:	0039      	movs	r1, r7
 8003802:	f7fc fd11 	bl	8000228 <__aeabi_uidivmod>
 8003806:	9b03      	ldr	r3, [sp, #12]
 8003808:	3e01      	subs	r6, #1
 800380a:	5c5b      	ldrb	r3, [r3, r1]
 800380c:	7033      	strb	r3, [r6, #0]
 800380e:	002b      	movs	r3, r5
 8003810:	0005      	movs	r5, r0
 8003812:	429f      	cmp	r7, r3
 8003814:	d9f3      	bls.n	80037fe <_printf_i+0xf6>
 8003816:	2f08      	cmp	r7, #8
 8003818:	d109      	bne.n	800382e <_printf_i+0x126>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	07db      	lsls	r3, r3, #31
 800381e:	d506      	bpl.n	800382e <_printf_i+0x126>
 8003820:	6862      	ldr	r2, [r4, #4]
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	dc02      	bgt.n	800382e <_printf_i+0x126>
 8003828:	2330      	movs	r3, #48	; 0x30
 800382a:	3e01      	subs	r6, #1
 800382c:	7033      	strb	r3, [r6, #0]
 800382e:	9b04      	ldr	r3, [sp, #16]
 8003830:	1b9b      	subs	r3, r3, r6
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	9b07      	ldr	r3, [sp, #28]
 8003836:	0021      	movs	r1, r4
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	9805      	ldr	r0, [sp, #20]
 800383c:	9b06      	ldr	r3, [sp, #24]
 800383e:	aa09      	add	r2, sp, #36	; 0x24
 8003840:	f7ff fef2 	bl	8003628 <_printf_common>
 8003844:	3001      	adds	r0, #1
 8003846:	d147      	bne.n	80038d8 <_printf_i+0x1d0>
 8003848:	2001      	movs	r0, #1
 800384a:	4240      	negs	r0, r0
 800384c:	b00b      	add	sp, #44	; 0x2c
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	2220      	movs	r2, #32
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	2278      	movs	r2, #120	; 0x78
 800385a:	4932      	ldr	r1, [pc, #200]	; (8003924 <_printf_i+0x21c>)
 800385c:	9103      	str	r1, [sp, #12]
 800385e:	0021      	movs	r1, r4
 8003860:	3145      	adds	r1, #69	; 0x45
 8003862:	700a      	strb	r2, [r1, #0]
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	c920      	ldmia	r1!, {r5}
 800386a:	0610      	lsls	r0, r2, #24
 800386c:	d402      	bmi.n	8003874 <_printf_i+0x16c>
 800386e:	0650      	lsls	r0, r2, #25
 8003870:	d500      	bpl.n	8003874 <_printf_i+0x16c>
 8003872:	b2ad      	uxth	r5, r5
 8003874:	6019      	str	r1, [r3, #0]
 8003876:	07d3      	lsls	r3, r2, #31
 8003878:	d502      	bpl.n	8003880 <_printf_i+0x178>
 800387a:	2320      	movs	r3, #32
 800387c:	4313      	orrs	r3, r2
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	2710      	movs	r7, #16
 8003882:	2d00      	cmp	r5, #0
 8003884:	d1a9      	bne.n	80037da <_printf_i+0xd2>
 8003886:	2220      	movs	r2, #32
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	4393      	bics	r3, r2
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	e7a4      	b.n	80037da <_printf_i+0xd2>
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	680d      	ldr	r5, [r1, #0]
 8003894:	1d10      	adds	r0, r2, #4
 8003896:	6949      	ldr	r1, [r1, #20]
 8003898:	6018      	str	r0, [r3, #0]
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	062e      	lsls	r6, r5, #24
 800389e:	d501      	bpl.n	80038a4 <_printf_i+0x19c>
 80038a0:	6019      	str	r1, [r3, #0]
 80038a2:	e002      	b.n	80038aa <_printf_i+0x1a2>
 80038a4:	066d      	lsls	r5, r5, #25
 80038a6:	d5fb      	bpl.n	80038a0 <_printf_i+0x198>
 80038a8:	8019      	strh	r1, [r3, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9e04      	ldr	r6, [sp, #16]
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	e7c0      	b.n	8003834 <_printf_i+0x12c>
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	1d11      	adds	r1, r2, #4
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	6816      	ldr	r6, [r2, #0]
 80038ba:	2100      	movs	r1, #0
 80038bc:	0030      	movs	r0, r6
 80038be:	6862      	ldr	r2, [r4, #4]
 80038c0:	f000 f922 	bl	8003b08 <memchr>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d001      	beq.n	80038cc <_printf_i+0x1c4>
 80038c8:	1b80      	subs	r0, r0, r6
 80038ca:	6060      	str	r0, [r4, #4]
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	6123      	str	r3, [r4, #16]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9a04      	ldr	r2, [sp, #16]
 80038d4:	7013      	strb	r3, [r2, #0]
 80038d6:	e7ad      	b.n	8003834 <_printf_i+0x12c>
 80038d8:	0032      	movs	r2, r6
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	9906      	ldr	r1, [sp, #24]
 80038de:	9805      	ldr	r0, [sp, #20]
 80038e0:	9d07      	ldr	r5, [sp, #28]
 80038e2:	47a8      	blx	r5
 80038e4:	3001      	adds	r0, #1
 80038e6:	d0af      	beq.n	8003848 <_printf_i+0x140>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	079b      	lsls	r3, r3, #30
 80038ec:	d415      	bmi.n	800391a <_printf_i+0x212>
 80038ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f0:	68e0      	ldr	r0, [r4, #12]
 80038f2:	4298      	cmp	r0, r3
 80038f4:	daaa      	bge.n	800384c <_printf_i+0x144>
 80038f6:	0018      	movs	r0, r3
 80038f8:	e7a8      	b.n	800384c <_printf_i+0x144>
 80038fa:	0022      	movs	r2, r4
 80038fc:	2301      	movs	r3, #1
 80038fe:	9906      	ldr	r1, [sp, #24]
 8003900:	9805      	ldr	r0, [sp, #20]
 8003902:	9e07      	ldr	r6, [sp, #28]
 8003904:	3219      	adds	r2, #25
 8003906:	47b0      	blx	r6
 8003908:	3001      	adds	r0, #1
 800390a:	d09d      	beq.n	8003848 <_printf_i+0x140>
 800390c:	3501      	adds	r5, #1
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	42ab      	cmp	r3, r5
 8003916:	dcf0      	bgt.n	80038fa <_printf_i+0x1f2>
 8003918:	e7e9      	b.n	80038ee <_printf_i+0x1e6>
 800391a:	2500      	movs	r5, #0
 800391c:	e7f7      	b.n	800390e <_printf_i+0x206>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	08003fb9 	.word	0x08003fb9
 8003924:	08003fca 	.word	0x08003fca

08003928 <__swbuf_r>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	0006      	movs	r6, r0
 800392c:	000d      	movs	r5, r1
 800392e:	0014      	movs	r4, r2
 8003930:	2800      	cmp	r0, #0
 8003932:	d004      	beq.n	800393e <__swbuf_r+0x16>
 8003934:	6a03      	ldr	r3, [r0, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <__swbuf_r+0x16>
 800393a:	f7ff fa21 	bl	8002d80 <__sinit>
 800393e:	69a3      	ldr	r3, [r4, #24]
 8003940:	60a3      	str	r3, [r4, #8]
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	071b      	lsls	r3, r3, #28
 8003946:	d528      	bpl.n	800399a <__swbuf_r+0x72>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d025      	beq.n	800399a <__swbuf_r+0x72>
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	b2ef      	uxtb	r7, r5
 8003954:	1ac0      	subs	r0, r0, r3
 8003956:	6963      	ldr	r3, [r4, #20]
 8003958:	b2ed      	uxtb	r5, r5
 800395a:	4283      	cmp	r3, r0
 800395c:	dc05      	bgt.n	800396a <__swbuf_r+0x42>
 800395e:	0021      	movs	r1, r4
 8003960:	0030      	movs	r0, r6
 8003962:	f7ff fcc9 	bl	80032f8 <_fflush_r>
 8003966:	2800      	cmp	r0, #0
 8003968:	d11d      	bne.n	80039a6 <__swbuf_r+0x7e>
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	3001      	adds	r0, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	60a3      	str	r3, [r4, #8]
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	6022      	str	r2, [r4, #0]
 8003978:	701f      	strb	r7, [r3, #0]
 800397a:	6963      	ldr	r3, [r4, #20]
 800397c:	4283      	cmp	r3, r0
 800397e:	d004      	beq.n	800398a <__swbuf_r+0x62>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	07db      	lsls	r3, r3, #31
 8003984:	d507      	bpl.n	8003996 <__swbuf_r+0x6e>
 8003986:	2d0a      	cmp	r5, #10
 8003988:	d105      	bne.n	8003996 <__swbuf_r+0x6e>
 800398a:	0021      	movs	r1, r4
 800398c:	0030      	movs	r0, r6
 800398e:	f7ff fcb3 	bl	80032f8 <_fflush_r>
 8003992:	2800      	cmp	r0, #0
 8003994:	d107      	bne.n	80039a6 <__swbuf_r+0x7e>
 8003996:	0028      	movs	r0, r5
 8003998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399a:	0021      	movs	r1, r4
 800399c:	0030      	movs	r0, r6
 800399e:	f000 f805 	bl	80039ac <__swsetup_r>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d0d3      	beq.n	800394e <__swbuf_r+0x26>
 80039a6:	2501      	movs	r5, #1
 80039a8:	426d      	negs	r5, r5
 80039aa:	e7f4      	b.n	8003996 <__swbuf_r+0x6e>

080039ac <__swsetup_r>:
 80039ac:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <__swsetup_r+0xc4>)
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	0005      	movs	r5, r0
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	000c      	movs	r4, r1
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d004      	beq.n	80039c4 <__swsetup_r+0x18>
 80039ba:	6a03      	ldr	r3, [r0, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <__swsetup_r+0x18>
 80039c0:	f7ff f9de 	bl	8002d80 <__sinit>
 80039c4:	230c      	movs	r3, #12
 80039c6:	5ee2      	ldrsh	r2, [r4, r3]
 80039c8:	b293      	uxth	r3, r2
 80039ca:	0711      	lsls	r1, r2, #28
 80039cc:	d423      	bmi.n	8003a16 <__swsetup_r+0x6a>
 80039ce:	06d9      	lsls	r1, r3, #27
 80039d0:	d407      	bmi.n	80039e2 <__swsetup_r+0x36>
 80039d2:	2309      	movs	r3, #9
 80039d4:	2001      	movs	r0, #1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	3337      	adds	r3, #55	; 0x37
 80039da:	4313      	orrs	r3, r2
 80039dc:	81a3      	strh	r3, [r4, #12]
 80039de:	4240      	negs	r0, r0
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	075b      	lsls	r3, r3, #29
 80039e4:	d513      	bpl.n	8003a0e <__swsetup_r+0x62>
 80039e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039e8:	2900      	cmp	r1, #0
 80039ea:	d008      	beq.n	80039fe <__swsetup_r+0x52>
 80039ec:	0023      	movs	r3, r4
 80039ee:	3344      	adds	r3, #68	; 0x44
 80039f0:	4299      	cmp	r1, r3
 80039f2:	d002      	beq.n	80039fa <__swsetup_r+0x4e>
 80039f4:	0028      	movs	r0, r5
 80039f6:	f7ff faed 	bl	8002fd4 <_free_r>
 80039fa:	2300      	movs	r3, #0
 80039fc:	6363      	str	r3, [r4, #52]	; 0x34
 80039fe:	2224      	movs	r2, #36	; 0x24
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	4393      	bics	r3, r2
 8003a04:	81a3      	strh	r3, [r4, #12]
 8003a06:	2300      	movs	r3, #0
 8003a08:	6063      	str	r3, [r4, #4]
 8003a0a:	6923      	ldr	r3, [r4, #16]
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	2308      	movs	r3, #8
 8003a10:	89a2      	ldrh	r2, [r4, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	81a3      	strh	r3, [r4, #12]
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <__swsetup_r+0x88>
 8003a1c:	21a0      	movs	r1, #160	; 0xa0
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	0089      	lsls	r1, r1, #2
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	400b      	ands	r3, r1
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <__swsetup_r+0x88>
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	0028      	movs	r0, r5
 8003a30:	f000 f89e 	bl	8003b70 <__smakebuf_r>
 8003a34:	220c      	movs	r2, #12
 8003a36:	5ea3      	ldrsh	r3, [r4, r2]
 8003a38:	2001      	movs	r0, #1
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	b299      	uxth	r1, r3
 8003a3e:	4002      	ands	r2, r0
 8003a40:	4203      	tst	r3, r0
 8003a42:	d00f      	beq.n	8003a64 <__swsetup_r+0xb8>
 8003a44:	2200      	movs	r2, #0
 8003a46:	60a2      	str	r2, [r4, #8]
 8003a48:	6962      	ldr	r2, [r4, #20]
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	61a2      	str	r2, [r4, #24]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	6922      	ldr	r2, [r4, #16]
 8003a52:	4282      	cmp	r2, r0
 8003a54:	d1c4      	bne.n	80039e0 <__swsetup_r+0x34>
 8003a56:	0609      	lsls	r1, r1, #24
 8003a58:	d5c2      	bpl.n	80039e0 <__swsetup_r+0x34>
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	3801      	subs	r0, #1
 8003a62:	e7bd      	b.n	80039e0 <__swsetup_r+0x34>
 8003a64:	0788      	lsls	r0, r1, #30
 8003a66:	d400      	bmi.n	8003a6a <__swsetup_r+0xbe>
 8003a68:	6962      	ldr	r2, [r4, #20]
 8003a6a:	60a2      	str	r2, [r4, #8]
 8003a6c:	e7ef      	b.n	8003a4e <__swsetup_r+0xa2>
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	20000068 	.word	0x20000068

08003a74 <_raise_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	0004      	movs	r4, r0
 8003a78:	000d      	movs	r5, r1
 8003a7a:	291f      	cmp	r1, #31
 8003a7c:	d904      	bls.n	8003a88 <_raise_r+0x14>
 8003a7e:	2316      	movs	r3, #22
 8003a80:	6003      	str	r3, [r0, #0]
 8003a82:	2001      	movs	r0, #1
 8003a84:	4240      	negs	r0, r0
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <_raise_r+0x24>
 8003a8e:	008a      	lsls	r2, r1, #2
 8003a90:	189b      	adds	r3, r3, r2
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	d108      	bne.n	8003aaa <_raise_r+0x36>
 8003a98:	0020      	movs	r0, r4
 8003a9a:	f000 f831 	bl	8003b00 <_getpid_r>
 8003a9e:	002a      	movs	r2, r5
 8003aa0:	0001      	movs	r1, r0
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	f000 f81a 	bl	8003adc <_kill_r>
 8003aa8:	e7ed      	b.n	8003a86 <_raise_r+0x12>
 8003aaa:	2000      	movs	r0, #0
 8003aac:	2a01      	cmp	r2, #1
 8003aae:	d0ea      	beq.n	8003a86 <_raise_r+0x12>
 8003ab0:	1c51      	adds	r1, r2, #1
 8003ab2:	d103      	bne.n	8003abc <_raise_r+0x48>
 8003ab4:	2316      	movs	r3, #22
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	e7e4      	b.n	8003a86 <_raise_r+0x12>
 8003abc:	2400      	movs	r4, #0
 8003abe:	0028      	movs	r0, r5
 8003ac0:	601c      	str	r4, [r3, #0]
 8003ac2:	4790      	blx	r2
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	e7de      	b.n	8003a86 <_raise_r+0x12>

08003ac8 <raise>:
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <raise+0x10>)
 8003acc:	0001      	movs	r1, r0
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	f7ff ffd0 	bl	8003a74 <_raise_r>
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000068 	.word	0x20000068

08003adc <_kill_r>:
 8003adc:	2300      	movs	r3, #0
 8003ade:	b570      	push	{r4, r5, r6, lr}
 8003ae0:	4d06      	ldr	r5, [pc, #24]	; (8003afc <_kill_r+0x20>)
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	f7fd fc18 	bl	800131e <_kill>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d103      	bne.n	8003afa <_kill_r+0x1e>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d000      	beq.n	8003afa <_kill_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	20000804 	.word	0x20000804

08003b00 <_getpid_r>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	f7fd fc06 	bl	8001312 <_getpid>
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <memchr>:
 8003b08:	b2c9      	uxtb	r1, r1
 8003b0a:	1882      	adds	r2, r0, r2
 8003b0c:	4290      	cmp	r0, r2
 8003b0e:	d101      	bne.n	8003b14 <memchr+0xc>
 8003b10:	2000      	movs	r0, #0
 8003b12:	4770      	bx	lr
 8003b14:	7803      	ldrb	r3, [r0, #0]
 8003b16:	428b      	cmp	r3, r1
 8003b18:	d0fb      	beq.n	8003b12 <memchr+0xa>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	e7f6      	b.n	8003b0c <memchr+0x4>
	...

08003b20 <__swhatbuf_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	000e      	movs	r6, r1
 8003b24:	001d      	movs	r5, r3
 8003b26:	230e      	movs	r3, #14
 8003b28:	5ec9      	ldrsh	r1, [r1, r3]
 8003b2a:	0014      	movs	r4, r2
 8003b2c:	b096      	sub	sp, #88	; 0x58
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	da0c      	bge.n	8003b4c <__swhatbuf_r+0x2c>
 8003b32:	89b2      	ldrh	r2, [r6, #12]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	0011      	movs	r1, r2
 8003b38:	4019      	ands	r1, r3
 8003b3a:	421a      	tst	r2, r3
 8003b3c:	d013      	beq.n	8003b66 <__swhatbuf_r+0x46>
 8003b3e:	2100      	movs	r1, #0
 8003b40:	3b40      	subs	r3, #64	; 0x40
 8003b42:	2000      	movs	r0, #0
 8003b44:	6029      	str	r1, [r5, #0]
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	b016      	add	sp, #88	; 0x58
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	466a      	mov	r2, sp
 8003b4e:	f000 f84d 	bl	8003bec <_fstat_r>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	dbed      	blt.n	8003b32 <__swhatbuf_r+0x12>
 8003b56:	23f0      	movs	r3, #240	; 0xf0
 8003b58:	9901      	ldr	r1, [sp, #4]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	4019      	ands	r1, r3
 8003b5e:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <__swhatbuf_r+0x4c>)
 8003b60:	18c9      	adds	r1, r1, r3
 8003b62:	424b      	negs	r3, r1
 8003b64:	4159      	adcs	r1, r3
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	e7ea      	b.n	8003b42 <__swhatbuf_r+0x22>
 8003b6c:	ffffe000 	.word	0xffffe000

08003b70 <__smakebuf_r>:
 8003b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b72:	2602      	movs	r6, #2
 8003b74:	898b      	ldrh	r3, [r1, #12]
 8003b76:	0005      	movs	r5, r0
 8003b78:	000c      	movs	r4, r1
 8003b7a:	4233      	tst	r3, r6
 8003b7c:	d006      	beq.n	8003b8c <__smakebuf_r+0x1c>
 8003b7e:	0023      	movs	r3, r4
 8003b80:	3347      	adds	r3, #71	; 0x47
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	6123      	str	r3, [r4, #16]
 8003b86:	2301      	movs	r3, #1
 8003b88:	6163      	str	r3, [r4, #20]
 8003b8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003b8c:	466a      	mov	r2, sp
 8003b8e:	ab01      	add	r3, sp, #4
 8003b90:	f7ff ffc6 	bl	8003b20 <__swhatbuf_r>
 8003b94:	9900      	ldr	r1, [sp, #0]
 8003b96:	0007      	movs	r7, r0
 8003b98:	0028      	movs	r0, r5
 8003b9a:	f7ff fa91 	bl	80030c0 <_malloc_r>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d108      	bne.n	8003bb4 <__smakebuf_r+0x44>
 8003ba2:	220c      	movs	r2, #12
 8003ba4:	5ea3      	ldrsh	r3, [r4, r2]
 8003ba6:	059a      	lsls	r2, r3, #22
 8003ba8:	d4ef      	bmi.n	8003b8a <__smakebuf_r+0x1a>
 8003baa:	2203      	movs	r2, #3
 8003bac:	4393      	bics	r3, r2
 8003bae:	431e      	orrs	r6, r3
 8003bb0:	81a6      	strh	r6, [r4, #12]
 8003bb2:	e7e4      	b.n	8003b7e <__smakebuf_r+0xe>
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	89a2      	ldrh	r2, [r4, #12]
 8003bb8:	6020      	str	r0, [r4, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	9b00      	ldr	r3, [sp, #0]
 8003bc0:	6120      	str	r0, [r4, #16]
 8003bc2:	6163      	str	r3, [r4, #20]
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <__smakebuf_r+0x74>
 8003bca:	0028      	movs	r0, r5
 8003bcc:	230e      	movs	r3, #14
 8003bce:	5ee1      	ldrsh	r1, [r4, r3]
 8003bd0:	f000 f81e 	bl	8003c10 <_isatty_r>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d005      	beq.n	8003be4 <__smakebuf_r+0x74>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	89a2      	ldrh	r2, [r4, #12]
 8003bdc:	439a      	bics	r2, r3
 8003bde:	3b02      	subs	r3, #2
 8003be0:	4313      	orrs	r3, r2
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	433b      	orrs	r3, r7
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	e7ce      	b.n	8003b8a <__smakebuf_r+0x1a>

08003bec <_fstat_r>:
 8003bec:	2300      	movs	r3, #0
 8003bee:	b570      	push	{r4, r5, r6, lr}
 8003bf0:	4d06      	ldr	r5, [pc, #24]	; (8003c0c <_fstat_r+0x20>)
 8003bf2:	0004      	movs	r4, r0
 8003bf4:	0008      	movs	r0, r1
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	f7fd fbef 	bl	80013dc <_fstat>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	d103      	bne.n	8003c0a <_fstat_r+0x1e>
 8003c02:	682b      	ldr	r3, [r5, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d000      	beq.n	8003c0a <_fstat_r+0x1e>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	20000804 	.word	0x20000804

08003c10 <_isatty_r>:
 8003c10:	2300      	movs	r3, #0
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	4d06      	ldr	r5, [pc, #24]	; (8003c30 <_isatty_r+0x20>)
 8003c16:	0004      	movs	r4, r0
 8003c18:	0008      	movs	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fd fbec 	bl	80013f8 <_isatty>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d103      	bne.n	8003c2c <_isatty_r+0x1c>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d000      	beq.n	8003c2c <_isatty_r+0x1c>
 8003c2a:	6023      	str	r3, [r4, #0]
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000804 	.word	0x20000804

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
